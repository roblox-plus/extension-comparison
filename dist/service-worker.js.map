{"version":3,"file":"./service-worker.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACftxlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://roblox-plus/./src/js/constants/index.ts","webpack://roblox-plus/./src/js/enums/presenceType.ts","webpack://roblox-plus/./src/js/enums/thumbnailState.ts","webpack://roblox-plus/./src/js/enums/thumbnailType.ts","webpack://roblox-plus/./src/js/service-worker/notifiers/friend-presence/index.ts","webpack://roblox-plus/./src/js/service-worker/notifiers/index.ts","webpack://roblox-plus/./src/js/services/badges/batchProcessor.ts","webpack://roblox-plus/./src/js/services/badges/index.ts","webpack://roblox-plus/./src/js/services/currency/getRobuxBalance.ts","webpack://roblox-plus/./src/js/services/currency/index.ts","webpack://roblox-plus/./src/js/services/followings/authenticatedUserFollowingProcessor.ts","webpack://roblox-plus/./src/js/services/followings/index.ts","webpack://roblox-plus/./src/js/services/followings/isAuthenticatedUserFollowing.ts","webpack://roblox-plus/./src/js/services/friends/getFriendRequestCount.ts","webpack://roblox-plus/./src/js/services/friends/getUserFriends.ts","webpack://roblox-plus/./src/js/services/friends/index.ts","webpack://roblox-plus/./src/js/services/game-launch/buildProtocolUrl.ts","webpack://roblox-plus/./src/js/services/game-launch/index.ts","webpack://roblox-plus/./src/js/services/inventory/index.ts","webpack://roblox-plus/./src/js/services/inventory/limitedInventory.ts","webpack://roblox-plus/./src/js/services/localization/index.ts","webpack://roblox-plus/./src/js/services/message/index.ts","webpack://roblox-plus/./src/js/services/presence/batchProcessor.ts","webpack://roblox-plus/./src/js/services/presence/index.ts","webpack://roblox-plus/./src/js/services/private-messages/getUnreadMessageCount.ts","webpack://roblox-plus/./src/js/services/private-messages/index.ts","webpack://roblox-plus/./src/js/services/settings/index.ts","webpack://roblox-plus/./src/js/services/thumbnails/batchProcessor.ts","webpack://roblox-plus/./src/js/services/thumbnails/getAvatarHeadshotThumbnail.ts","webpack://roblox-plus/./src/js/services/thumbnails/index.ts","webpack://roblox-plus/./src/js/services/trades/getTradeCount.ts","webpack://roblox-plus/./src/js/services/trades/index.ts","webpack://roblox-plus/./src/js/services/users/getAuthenticatedUser.ts","webpack://roblox-plus/./src/js/services/users/index.ts","webpack://roblox-plus/./src/js/utils/expireableDictionary.ts","webpack://roblox-plus/./src/js/utils/fetchDataUri.ts","webpack://roblox-plus/./src/js/utils/launchProtocolUrl.ts","webpack://roblox-plus/./src/js/utils/linkify.ts","webpack://roblox-plus/./src/js/utils/wait.ts","webpack://roblox-plus/./src/js/utils/xsrfFetch.ts","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/batch/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/errorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/itemErrorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/promise-queue/index.js","webpack://roblox-plus/webpack/bootstrap","webpack://roblox-plus/webpack/runtime/define property getters","webpack://roblox-plus/webpack/runtime/hasOwnProperty shorthand","webpack://roblox-plus/webpack/runtime/make namespace object","webpack://roblox-plus/./src/js/service-worker/index.ts"],"sourcesContent":["const manifest = chrome.runtime.getManifest();\nconst isBackgroundPage = chrome.runtime.getURL(manifest.background?.page || '') === location.href;\nexport { manifest, isBackgroundPage };\n","// The types of user presence.\nvar PresenceType;\n(function (PresenceType) {\n    // The user is offline.\n    PresenceType[\"Offline\"] = \"Offline\";\n    // The user is online.\n    PresenceType[\"Online\"] = \"Online\";\n    // The user is currently in an experience.\n    PresenceType[\"Experience\"] = \"Experience\";\n    // The user is currently in Roblox Studio.\n    PresenceType[\"Studio\"] = \"Studio\";\n})(PresenceType || (PresenceType = {}));\nexport default PresenceType;\n","// Possible states for a thumbnail to be in.\nvar ThumbnailState;\n(function (ThumbnailState) {\n    // The thumbnail had an unexpected error trying to load.\n    ThumbnailState[\"Error\"] = \"Error\";\n    // The thumbnailed loaded successfully.\n    ThumbnailState[\"Completed\"] = \"Completed\";\n    // The thumbnail is currently in review.\n    ThumbnailState[\"InReview\"] = \"InReview\";\n    // The thumbnail is pending, and should be retried.\n    ThumbnailState[\"Pending\"] = \"Pending\";\n    // The thumbnail is blocked.\n    ThumbnailState[\"Blocked\"] = \"Blocked\";\n    // The thumbnail is temporarily unavailable.\n    ThumbnailState[\"TemporarilyUnavailable\"] = \"TemporarilyUnavailable\";\n})(ThumbnailState || (ThumbnailState = {}));\nexport default ThumbnailState;\n","// The types of thumbnails that can be requested.\nvar ThumbnailType;\n(function (ThumbnailType) {\n    // An avatar head shot thumbnail.\n    ThumbnailType[\"AvatarHeadShot\"] = \"AvatarHeadShot\";\n    // The thumbnail for an asset.\n    ThumbnailType[\"Asset\"] = \"Asset\";\n})(ThumbnailType || (ThumbnailType = {}));\nexport default ThumbnailType;\n","import PresenceType from '../../../enums/presenceType';\nimport { getUserFriends } from '../../../services/friends';\nimport { followUser } from '../../../services/game-launch';\nimport { getTranslationResource } from '../../../services/localization';\nimport { getUserPresence } from '../../../services/presence';\nimport { getSettingValue } from '../../../services/settings';\nimport { getAvatarHeadshotThumbnail } from '../../../services/thumbnails';\nimport { isAuthenticatedUserFollowing } from '../../../services/followings';\nimport { getAuthenticatedUser } from '../../../services/users';\nimport fetchDataUri from '../../../utils/fetchDataUri';\nimport { getUserProfileLink } from '../../../utils/linkify';\n// The prefix for the ID of the notification to display.\nconst notificationIdPrefix = 'friend-notifier-';\n// A method to check if two presences match.\nconst presenceMatches = (a, b) => {\n    if (a.type !== b.type) {\n        // Not the same presence type, definitely not a match.\n        return false;\n    }\n    if (a.location?.universeId !== b.location?.universeId) {\n        // Not the same experience, definitely not a match.\n        return false;\n    }\n    // The type, and location are the same. Must be the same presence.\n    return true;\n};\nconst isEnabled = async () => {\n    const setting = await getSettingValue('friendNotifier');\n    return setting?.on === true;\n};\nconst isPresenceTypeEnabled = async (presenceType) => {\n    const setting = await getSettingValue('friendNotifier');\n    switch (presenceType) {\n        case PresenceType.Online:\n            return setting?.online || false;\n        case PresenceType.Offline:\n            return setting?.offline || false;\n        case PresenceType.Experience:\n            // If the setting is somehow null, assume we want to know about this one by default.\n            if (setting?.game === false) {\n                return false;\n            }\n            return true;\n        case PresenceType.Studio:\n        default:\n            // We don't care about these presence types.\n            return false;\n    }\n};\n// Gets the icon URL to display on the notification.\nconst getNotificationIconUrl = async (userId) => {\n    const thumbnail = await getAvatarHeadshotThumbnail(userId);\n    if (!thumbnail.imageUrl) {\n        return '';\n    }\n    try {\n        return await fetchDataUri(new URL(thumbnail.imageUrl));\n    }\n    catch (err) {\n        console.error('Failed to fetch icon URL from thumbnail', userId, thumbnail, err);\n        return '';\n    }\n};\n// Fetches the title for the notification to display to the user, based on current and previous known presence.\nconst getNotificationTitle = (user, presence, previousState) => {\n    switch (presence.type) {\n        case PresenceType.Offline:\n            return `${user.displayName} went offline`;\n        case PresenceType.Online:\n            if (previousState.type !== PresenceType.Offline) {\n                // If they were already online, don't notify them of this again.\n                return '';\n            }\n            return `${user.displayName} is now online`;\n        case PresenceType.Experience:\n            if (!presence.location?.name) {\n                // They joined an experience, but we don't know what they're playing.\n                // Don't tell the human what we don't know.\n                return '';\n            }\n            return `${user.displayName} is now playing`;\n        case PresenceType.Studio:\n            if (!presence.location?.name) {\n                // They launched Roblox studio, but we don't know what they're creating.\n                // Don't tell the human what we don't know.\n                return '';\n            }\n            if (previousState.type !== PresenceType.Online) {\n                // If they went from in-experience -> in-studio, it's possible they just had Roblox studio open\n                // while playing a game, and then closed it.\n                // Occassionally I have also observed offline <-> Studio swapping back and forth..\n                // This creates noise, and we don't like noise.\n                return '';\n            }\n            return `${user.displayName} is now creating`;\n    }\n};\n// Gets the buttons that should be displayed on a notification, based on the presence.\nconst getNotificationButtons = async (presence) => {\n    if (presence.type === PresenceType.Experience && presence.location?.placeId) {\n        const joinText = await getTranslationResource('Feature.PeopleList', 'Action.Join');\n        return [\n            {\n                title: joinText,\n            },\n        ];\n    }\n    return [];\n};\n// Handle what happens when a notification is clicked.\nchrome.notifications.onClicked.addListener((notificationId) => {\n    if (!notificationId.startsWith(notificationIdPrefix)) {\n        return;\n    }\n    chrome.tabs.create({\n        url: getUserProfileLink(Number(notificationId.substring(notificationIdPrefix.length))).href,\n        active: true,\n    });\n});\nchrome.notifications.onButtonClicked.addListener(async (notificationId) => {\n    if (!notificationId.startsWith(notificationIdPrefix)) {\n        return;\n    }\n    const userId = Number(notificationId.substring(notificationIdPrefix.length));\n    try {\n        await followUser(userId);\n    }\n    catch (err) {\n        console.error('Failed to launch the experience', err);\n    }\n});\n// Processes the presences, and send the notifications, when appropriate.\nexport default async (previousStates) => {\n    // Check if the notifier is enabled.\n    const enabled = await isEnabled();\n    if (!enabled) {\n        // The feature is not enabled, clear the state, and do nothing.\n        return null;\n    }\n    // Check who is logged in right now.\n    const authenticatedUser = await getAuthenticatedUser();\n    if (!authenticatedUser) {\n        // User is not logged in, no state to return.\n        return null;\n    }\n    // Fetch the friends\n    const friends = await getUserFriends(authenticatedUser.id);\n    // Check the presence for each of the friends\n    const currentState = {};\n    await Promise.all(friends.map(async (friend) => {\n        const presence = (currentState[friend.id] = await getUserPresence(friend.id));\n        const previousState = previousStates && previousStates[friend.id];\n        if (previousState && !presenceMatches(previousState, presence)) {\n            // The presence for this friend changed, do something!\n            const notificationId = notificationIdPrefix + friend.id;\n            const buttons = await getNotificationButtons(presence);\n            const title = getNotificationTitle(friend, presence, previousState);\n            if (!title) {\n                // We don't have a title for the notification, so don't show one.\n                chrome.notifications.clear(notificationId);\n                return;\n            }\n            const isEnabled = await isPresenceTypeEnabled(presence.type);\n            if (!isEnabled) {\n                // The authenticated user does not want to know about these types of presence changes.\n                chrome.notifications.clear(notificationId);\n                return;\n            }\n            const isFollowing = await isAuthenticatedUserFollowing(friend.id);\n            if (!isFollowing) {\n                // We're not following this friend, don't show notifications about them.\n                chrome.notifications.clear(notificationId);\n                return;\n            }\n            const iconUrl = await getNotificationIconUrl(friend.id);\n            if (!iconUrl) {\n                // We don't have an icon we can use, so we can't display a notification.\n                chrome.notifications.clear(notificationId);\n                return;\n            }\n            chrome.notifications.create(notificationId, {\n                type: 'basic',\n                iconUrl,\n                title,\n                message: presence.location?.name ?? '',\n                contextMessage: 'Roblox+ Friend Notifier',\n                isClickable: true,\n                buttons,\n            });\n        }\n    }));\n    return currentState;\n};\n","import FriendPresenceNotifier from './friend-presence';\n// Registry of all the notifiers\nconst notifiers = {};\nnotifiers['notifiers/friend-presence'] = FriendPresenceNotifier;\n// TODO: Update to use chrome.storage.session for manifest V3\nconst notifierStates = {};\n// Execute a notifier by name.\nconst executeNotifier = async (name) => {\n    const notifier = notifiers[name];\n    if (!notifier) {\n        return;\n    }\n    try {\n        // Fetch the state from the last time the notifier ran.\n        // ...\n        // Run the notifier.\n        const newState = await notifier(notifierStates[name]);\n        // Save the state for the next time the notifier runs.\n        if (newState) {\n            notifierStates[name] = newState;\n        }\n        else {\n            delete notifierStates[name];\n        }\n    }\n    catch (err) {\n        console.error(name, 'failed to run', err);\n    }\n};\n// Listener for the chrome.alarms API, to process the notification checks\nchrome.alarms.onAlarm.addListener(async ({ name }) => {\n    await executeNotifier(name);\n});\nfor (let name in notifiers) {\n    chrome.alarms.create(name, {\n        periodInMinutes: 1,\n    });\n}\nglobalThis.notifiers = notifiers;\nglobalThis.executeNotifier = executeNotifier;\nexport { executeNotifier };\nexport default notifiers;\n","import { Batch } from '@tix-factory/batch';\nclass BadgeAwardBatchProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 1 * 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const response = await fetch(`https://badges.roblox.com/v1/users/${items[0].value.userId}/badges/awarded-dates?badgeIds=${items\n            .map((i) => i.value.badgeId)\n            .join(',')}`);\n        if (!response.ok) {\n            throw new Error('Failed to load badge award statuses');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const badgeAward = result.data.find((b) => b.badgeId === item.value.badgeId);\n            if (badgeAward?.awardedDate) {\n                item.resolve(new Date(badgeAward.awardedDate));\n            }\n            else {\n                item.resolve(undefined);\n            }\n        });\n    }\n    getBatch() {\n        const now = performance.now();\n        const batch = [];\n        for (let i = 0; i < this.queueArray.length; i++) {\n            const batchItem = this.queueArray[i];\n            if (batchItem.retryAfter > now) {\n                // retryAfter is set at Infinity while the item is being processed\n                // so we should always check it, even if we're not retrying items\n                continue;\n            }\n            if (batch.length < 1 ||\n                batch[0].value.userId === batchItem.value.userId) {\n                // We group all the requests for badge award dates together by user ID.\n                batch.push(batchItem);\n            }\n            if (batch.length >= this.config.maxSize) {\n                // We have all the items we need, break.\n                break;\n            }\n        }\n        return batch;\n    }\n    getKey(item) {\n        return `${item.userId}:${item.badgeId}`;\n    }\n}\nexport default BadgeAwardBatchProcessor;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nimport BadgeAwardBatchProcessor from './batchProcessor';\nconst messageDestination = 'badgesService.getBadgeAwardDate';\nconst badgeAwardProcessor = new BadgeAwardBatchProcessor();\nconst badgeAwardCache = new ExpirableDictionary('badgesService', 60 * 1000);\n// Fetches the date when a badge was awarded to the specified user.\nconst getBadgeAwardDate = async (userId, badgeId) => {\n    const date = await sendMessage(messageDestination, {\n        userId,\n        badgeId,\n    });\n    return date ? new Date(date) : undefined;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return badgeAwardCache.getOrAdd(badgeAwardProcessor.getKey(message), async () => {\n        // Queue up the fetch request, when not in the cache\n        const date = await badgeAwardProcessor.enqueue(message);\n        return date?.getTime();\n    });\n});\nglobalThis.badgesService = { getBadgeAwardDate };\nexport { getBadgeAwardDate };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'currencyService.getRobuxBalance';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the Robux balance of the currently authenticated user.\nconst getRobuxBalance = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the Robux balance of the currently authenticated user.\nconst loadRobuxBalance = async (userId) => {\n    const response = await fetch(`https://economy.roblox.com/v1/users/${userId}/currency`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load Robux balance';\n    }\n    const result = await response.json();\n    try {\n        // HACK: Continue recording Robux history to not impact current functionality.\n        window.RPlus.robuxHistory?.recordUserRobux(userId, result.robux);\n    }\n    catch (err) {\n        console.warn('Failed to record robuxHistory');\n    }\n    return result.robux;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadRobuxBalance(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getRobuxBalance;\n","import { default as getRobuxBalance } from './getRobuxBalance';\nglobalThis.currencyService = { getRobuxBalance };\nexport { getRobuxBalance };\n","import { Batch } from '@tix-factory/batch';\nimport xsrfFetch from '../../utils/xsrfFetch';\nclass AuthenticatedUserFollowingProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 1 * 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const response = await xsrfFetch(new URL('https://friends.roblox.com/v1/user/following-exists'), {\n            method: 'POST',\n            body: JSON.stringify({\n                targetUserIds: items.map((i) => i.value),\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to load authenticated user following statuses');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const following = result.followings.find((f) => f.userId === item.value);\n            item.resolve(following?.isFollowing === true);\n        });\n    }\n    getKey(userId) {\n        return `${userId}`;\n    }\n}\nexport default AuthenticatedUserFollowingProcessor;\n","import { default as isAuthenticatedUserFollowing } from './isAuthenticatedUserFollowing';\nglobalThis.followingsService = { isAuthenticatedUserFollowing };\nexport { isAuthenticatedUserFollowing };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nimport AuthenticatedUserFollowingProcessor from './authenticatedUserFollowingProcessor';\nconst messageDestination = 'followingsService.isAuthenticatedUserFollowing';\nconst batchProcessor = new AuthenticatedUserFollowingProcessor();\nconst cache = new ExpirableDictionary(messageDestination, 60 * 1000);\n// Checks if the authenticated user is following another user.\nconst isAuthenticatedUserFollowing = (userId) => {\n    return sendMessage(messageDestination, {\n        userId,\n    });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    batchProcessor.enqueue(message.userId));\n});\nexport default isAuthenticatedUserFollowing;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'friendsService.getFriendRequestCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the inbound friend request count for the currently authenticated user.\nconst getFriendRequestCount = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the inbound friend request count for the currently authenticated user.\nconst loadFriendRequestCount = async (userId) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://friends.roblox.com/v1/user/friend-requests/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load friend request count';\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadFriendRequestCount(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getFriendRequestCount;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'friendsService.getUserFriends';\nconst cache = new ExpirableDictionary(messageDestination, 60 * 1000);\n// Fetches the list of friends for the user.\nconst getUserFriends = (userId) => {\n    return sendMessage(messageDestination, {\n        userId,\n    });\n};\n// Loads the actual friend list for the user.\nconst loadUserFriends = async (userId) => {\n    const response = await fetch(`https://friends.roblox.com/v1/users/${userId}/friends`);\n    if (!response.ok) {\n        throw new Error(`Failed to load friends for user (${userId})`);\n    }\n    const result = await response.json();\n    return result.data.map((r) => {\n        return {\n            id: r.id,\n            name: r.name,\n            displayName: r.displayName,\n        };\n    });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadUserFriends(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getUserFriends;\n","import { default as getUserFriends } from './getUserFriends';\nimport { default as getFriendRequestCount } from './getFriendRequestCount';\nglobalThis.friendsService = { getUserFriends, getFriendRequestCount };\nexport { getUserFriends, getFriendRequestCount };\n","import { isBackgroundPage } from '../../constants';\nimport xsrfFetch from '../../utils/xsrfFetch';\n// The generated authentication ticket URL, to prevent other extensions from getting the special headers included.\nconst authTicketUrl = new URL(`https://auth.roblox.com/v1/authentication-ticket?roblox-plus-security-token=${crypto.randomUUID()}`);\n// Fetches the authentication ticket, to launch the experience with.\nconst getAuthenticationTicket = async () => {\n    const response = await xsrfFetch(authTicketUrl, {\n        method: 'POST',\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to fetch authentication ticket for game launch`);\n    }\n    return response.headers.get('rbx-authentication-ticket');\n};\n// Builds the place launcher URL, used to craft the protocol launcher URL.\nconst buildPlaceLauncherUrl = (info) => {\n    const prefix = `https://assetgame.roblox.com/game/PlaceLauncher.ashx?request=`;\n    if (info.followUserId) {\n        return `${prefix}RequestFollowUser&userId=${info.followUserId}`;\n    }\n    throw new Error('Unable to determine place launcher URL');\n};\n// Builds the protocol launcher URL, to launch the experience with.\nconst buildProtocolUrl = async (info) => {\n    const authenticationTicket = await getAuthenticationTicket();\n    const placeLauncherUrl = encodeURIComponent(buildPlaceLauncherUrl(info));\n    const currentTime = +new Date();\n    return `roblox-player:1+launchmode:play+launchTime:${currentTime}+placelauncherurl:${placeLauncherUrl}+gameinfo:${authenticationTicket}`;\n};\nif (isBackgroundPage) {\n    // Set the Referer header, so that we can access the authentication ticket, for the protocol launcher URL.\n    chrome.declarativeNetRequest.updateSessionRules({\n        removeRuleIds: [1],\n        addRules: [\n            {\n                id: 1,\n                condition: {\n                    urlFilter: authTicketUrl.href,\n                    requestMethods: [chrome.declarativeNetRequest.RequestMethod.POST],\n                    resourceTypes: [\n                        chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,\n                    ],\n                },\n                action: {\n                    type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,\n                    requestHeaders: [\n                        {\n                            header: 'Referer',\n                            operation: chrome.declarativeNetRequest.HeaderOperation.SET,\n                            value: 'https://www.roblox.com/groups/2518656/Roblox-Plus?extension-game-launch=true',\n                        },\n                    ],\n                },\n            },\n        ],\n    });\n}\nexport default buildProtocolUrl;\n","import launchProtocolUrl from '../../utils/launchProtocolUrl';\nimport buildProtocolUrl from './buildProtocolUrl';\n// Launches into the experience that the specified user is playing.\nconst followUser = async (userId) => {\n    const url = await buildProtocolUrl({\n        followUserId: userId,\n    });\n    await launchProtocolUrl(url);\n};\nglobalThis.gameLaunchService = { followUser };\nexport { followUser };\n","import xsrfFetch from '../../utils/xsrfFetch';\nimport { default as getLimitedInventory } from './limitedInventory';\n// Removes an asset from the authenticated user's inventory.\nconst deleteAsset = async (assetId) => {\n    const response = await xsrfFetch(new URL(`https://assetgame.roblox.com/asset/delete-from-inventory`), {\n        method: 'POST',\n        body: JSON.stringify({\n            assetId: assetId,\n        }),\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to remove asset (${assetId})`);\n    }\n};\nglobalThis.inventoryService = { deleteAsset, getLimitedInventory };\nexport { deleteAsset, getLimitedInventory };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'inventoryService.getLimitedInventory';\nconst cache = new ExpirableDictionary(messageDestination, 5 * 60 * 1000);\n// Fetches the limited inventory for the specified user.\nconst getLimitedInventory = (userId) => {\n    return sendMessage(messageDestination, {\n        userId,\n    });\n};\n// Actually loads the inventory.\nconst loadLimitedInventory = async (userId) => {\n    const foundUserAssetIds = new Set();\n    const limitedAssets = [];\n    let nextPageCursor = '';\n    do {\n        const response = await fetch(`https://inventory.roblox.com/v1/users/${userId}/assets/collectibles?limit=100&cursor=${nextPageCursor}`);\n        if (response.status === 429) {\n            // Throttled. Wait a few seconds, and try again.\n            await wait(5000);\n            continue;\n        }\n        else if (response.status === 403) {\n            throw new Error('Inventory hidden');\n        }\n        else if (!response.ok) {\n            throw new Error('Inventory failed to load');\n        }\n        const result = await response.json();\n        nextPageCursor = result.nextPageCursor;\n        result.data.forEach((item) => {\n            const userAssetId = Number(item.userAssetId);\n            if (foundUserAssetIds.has(userAssetId)) {\n                return;\n            }\n            foundUserAssetIds.add(userAssetId);\n            limitedAssets.push({\n                userAssetId,\n                id: item.assetId,\n                name: item.name,\n                recentAveragePrice: item.recentAveragePrice\n                    ? Number(item.recentAveragePrice)\n                    : NaN,\n                serialNumber: item.serialNumber ? Number(item.serialNumber) : NaN,\n                stock: item.assetStock === 0 ? 0 : item.assetStock || undefined,\n            });\n        });\n    } while (nextPageCursor);\n    return limitedAssets;\n};\n// Listen for background messages\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadLimitedInventory(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getLimitedInventory;\n","import { addListener, sendMessage } from '../message';\nconst englishLocale = 'en_us';\nconst messageDestination = 'localizationService.getTranslationResources';\nlet translationResourceCache = [];\nlet localeCache = '';\n// Gets the locale for the authenticated user.\nconst getAuthenticatedUserLocale = async () => {\n    if (localeCache) {\n        return localeCache;\n    }\n    try {\n        const response = await fetch(`https://locale.roblox.com/v1/locales/user-locale`);\n        if (!response.ok) {\n            console.warn('Failed to fetch user locale - defaulting to English.', response.status);\n            return (localeCache = englishLocale);\n        }\n        const result = await response.json();\n        return (localeCache = result.supportedLocale.locale);\n    }\n    catch (e) {\n        console.warn('Unhandled error loading user locale - defaulting to English.', e);\n        return (localeCache = englishLocale);\n    }\n};\n// Fetches all the translation resources for the authenticated user.\nconst getTranslationResources = async () => {\n    if (translationResourceCache.length > 0) {\n        return translationResourceCache;\n    }\n    return (translationResourceCache = await sendMessage(messageDestination, {}));\n};\n// Fetches an individual translation resource.\nconst getTranslationResource = async (namespace, key) => {\n    const translationResources = await getTranslationResources();\n    const resource = translationResources.find((r) => r.namespace === namespace && r.key === key);\n    if (!resource) {\n        console.warn(`No translation resource available.\\n\\tNamespace: ${namespace}\\n\\tKey: ${key}`);\n    }\n    return resource?.value || '';\n};\n// Listener to ensure these always happen in the background, for strongest caching potential.\naddListener(messageDestination, async () => {\n    if (translationResourceCache.length > 0) {\n        return translationResourceCache;\n    }\n    const locale = await getAuthenticatedUserLocale();\n    const response = await fetch(`https://translations.roblox.com/v1/translations?consumerType=Web`);\n    if (!response.ok) {\n        throw new Error(`Failed to load translation resources (${response.status})`);\n    }\n    const result = await response.json();\n    const resourcesUrl = result.data.find((r) => r.locale === locale) ||\n        result.data.find((r) => r.locale === englishLocale);\n    if (!resourcesUrl) {\n        throw new Error(`Failed to find translation resources for locale (${locale})`);\n    }\n    const resources = await fetch(resourcesUrl.url);\n    const resourcesJson = await resources.json();\n    return (translationResourceCache = resourcesJson.contents.map((r) => {\n        return {\n            namespace: r.namespace,\n            key: r.key,\n            value: r.translation || r.english,\n        };\n    }));\n}, {\n    // Ensure that multiple requests for this information can't be processed at once.\n    levelOfParallelism: 1,\n});\nglobalThis.localizationService = { getTranslationResource };\nexport { getTranslationResource };\n","import { isBackgroundPage } from '../../constants';\n// All the listeners, set in the background page.\nconst listeners = {};\n// All the tabs actively connected to the message service.\nconst tabs = {};\n// An identifier that tells us which version of the messaging service we're using,\n// to ensure we don't try to process a message not intended for us.\nconst version = 2.5;\n// Send a message to a destination, and get back the result.\nconst sendMessage = async (destination, message) => {\n    return new Promise(async (resolve, reject) => {\n        const serializedMessage = JSON.stringify(message);\n        if (isBackgroundPage) {\n            // Message is from the background page, to the background page.\n            try {\n                if (listeners[destination]) {\n                    const message = JSON.parse(serializedMessage);\n                    const result = await listeners[destination](message);\n                    console.debug(`Local listener response for '${destination}':`, result, message);\n                    const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                    if (result.success) {\n                        resolve(data);\n                    }\n                    else {\n                        reject(data);\n                    }\n                }\n                else {\n                    reject(`No message listener: ${destination}`);\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        }\n        else {\n            const outboundMessage = JSON.stringify({\n                version,\n                destination,\n                message: serializedMessage,\n            });\n            console.debug(`Sending message to '${destination}'`, serializedMessage);\n            chrome.runtime.sendMessage(outboundMessage, (result) => {\n                if (result === undefined) {\n                    reject(`Unexpected message result (undefined), suggests no listener in background page.\\n\\tDestination: ${destination}`);\n                    return;\n                }\n                const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                if (result.success) {\n                    resolve(data);\n                }\n                else {\n                    reject(data);\n                }\n            });\n        }\n    });\n};\n// Fetches a tab that we can send a message to, for work processing.\nconst getWorkerTab = () => {\n    const keys = Object.keys(tabs);\n    return keys.length > 0 ? tabs[keys[0]] : undefined;\n};\n// Sends a message to a tab.\nconst sendMessageToTab = async (destination, message, tab) => {\n    const serializedMessage = JSON.stringify(message);\n    const outboundMessage = JSON.stringify({\n        version,\n        destination,\n        message: serializedMessage,\n    });\n    console.debug(`Sending message to '${destination}' in tab`, serializedMessage, tab);\n    tab.postMessage(outboundMessage);\n};\n// Listen for messages at a specific destination.\nconst addListener = (destination, listener, options = {\n    levelOfParallelism: -1,\n}) => {\n    if (listeners[destination]) {\n        throw new Error(`${destination} already has message listener attached`);\n    }\n    const processMessage = async (message) => {\n        try {\n            console.debug(`Processing message for '${destination}'`, message);\n            const result = await listener(message);\n            const response = {\n                success: true,\n                data: JSON.stringify(result),\n            };\n            console.debug(`Successful message result from '${destination}':`, response, message);\n            return response;\n        }\n        catch (err) {\n            const response = {\n                success: false,\n                data: JSON.stringify(err),\n            };\n            console.debug(`Failed message result from '${destination}':`, response, message, err);\n            return response;\n        }\n    };\n    listeners[destination] = (message) => {\n        if (options.levelOfParallelism !== 1) {\n            return processMessage(message);\n        }\n        return new Promise((resolve, reject) => {\n            // https://stackoverflow.com/a/73482349/1663648\n            navigator.locks\n                .request(`messageService:${destination}`, async () => {\n                try {\n                    const result = await processMessage(message);\n                    resolve(result);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    };\n};\n// If we're currently in the background page, listen for messages.\nif (isBackgroundPage) {\n    chrome.runtime.onMessage.addListener((rawMessage, sender, sendResponse) => {\n        if (typeof rawMessage !== 'string') {\n            // Not for us.\n            return;\n        }\n        const fullMessage = JSON.parse(rawMessage);\n        if (fullMessage.version !== version ||\n            !fullMessage.destination ||\n            !fullMessage.message) {\n            // Not for us.\n            return;\n        }\n        const listener = listeners[fullMessage.destination];\n        if (!listener) {\n            sendResponse({\n                success: false,\n                data: JSON.stringify(`Could not route message to destination: ${fullMessage.destination}`),\n            });\n            return;\n        }\n        const message = JSON.parse(fullMessage.message);\n        listener(message)\n            .then(sendResponse)\n            .catch((err) => {\n            console.error('Listener is never expected to throw.', err, rawMessage, fullMessage);\n            sendResponse({\n                success: false,\n                data: JSON.stringify('Listener threw unhandled exception (see background page for error).'),\n            });\n        });\n        // Required for asynchronous callbacks\n        // https://stackoverflow.com/a/20077854/1663648\n        return true;\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n        const id = crypto.randomUUID();\n        console.debug('Tab connected', id, port);\n        tabs[id] = port;\n        port.onDisconnect.addListener(() => {\n            console.debug('Disconnecting tab', id, port);\n            delete tabs[id];\n        });\n    });\n}\nelse {\n    console.debug(`Not attaching listener for messages, because we're not in the background.`);\n    if (!window.messageServiceConnection) {\n        const port = (window.messageServiceConnection = chrome.runtime.connect(chrome.runtime.id, {\n            name: 'messageService',\n        }));\n        port.onMessage.addListener((rawMessage) => {\n            if (typeof rawMessage !== 'string') {\n                // Not for us.\n                return;\n            }\n            const fullMessage = JSON.parse(rawMessage);\n            if (fullMessage.version !== version ||\n                !fullMessage.destination ||\n                !fullMessage.message) {\n                // Not for us.\n                return;\n            }\n            const listener = listeners[fullMessage.destination];\n            if (!listener) {\n                // No listener in this tab for this message.\n                return;\n            }\n            // We don't really have a way to communicate the response back to the service worker.\n            // So we just... do nothing with it.\n            const message = JSON.parse(fullMessage.message);\n            listener(message).catch((err) => {\n                console.error('Unhandled error processing message in tab', fullMessage, err);\n            });\n        });\n    }\n}\nglobalThis.messageService = { sendMessage, addListener, getWorkerTab, sendMessageToTab };\nexport { sendMessage, addListener, getWorkerTab, sendMessageToTab };\n","import { Batch } from '@tix-factory/batch';\nimport PresenceType from '../../enums/presenceType';\nconst getPresenceType = (presenceType) => {\n    switch (presenceType) {\n        case 1:\n            return PresenceType.Online;\n        case 2:\n            return PresenceType.Experience;\n        case 3:\n            return PresenceType.Studio;\n        default:\n            return PresenceType.Offline;\n    }\n};\nconst getLocationName = (presenceType, name) => {\n    if (!name) {\n        return '';\n    }\n    if (presenceType === PresenceType.Studio) {\n        return name.replace(/^Studio\\s+-\\s*/, '');\n    }\n    return name;\n};\nclass PresenceBatchProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 3 * 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const response = await fetch('https://presence.roblox.com/v1/presence/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                userIds: items.map((i) => i.value),\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to load user presence');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const presence = result.userPresences.find((p) => p.userId === item.value);\n            if (presence) {\n                const presenceType = getPresenceType(presence.userPresenceType);\n                if (presence.placeId &&\n                    (presenceType === PresenceType.Experience ||\n                        presenceType === PresenceType.Studio)) {\n                    item.resolve({\n                        type: presenceType,\n                        location: {\n                            placeId: presence.placeId || undefined,\n                            universeId: presence.universeId || undefined,\n                            name: getLocationName(presenceType, presence.lastLocation),\n                            serverId: presence.gameId,\n                        },\n                    });\n                }\n                else {\n                    item.resolve({\n                        type: presenceType,\n                    });\n                }\n            }\n            else {\n                item.resolve({\n                    type: PresenceType.Offline,\n                });\n            }\n        });\n    }\n}\nexport default PresenceBatchProcessor;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nimport PresenceBatchProcessor from './batchProcessor';\nconst messageDestination = 'presenceService.getUserPresence';\nconst presenceProcessor = new PresenceBatchProcessor();\nconst presenceCache = new ExpirableDictionary('presenceService', 15 * 1000);\n// Fetches the presence for a user.\nconst getUserPresence = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return presenceCache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    presenceProcessor.enqueue(message.userId));\n});\nglobalThis.presenceService = { getUserPresence };\nexport { getUserPresence };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'privateMessagesService.getUnreadMessageCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the unread private message count for the currently authenticated user.\nconst getUnreadMessageCount = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the unread private message count for the authenticated user.\nconst loadUnreadMessageCount = async (userId) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://privatemessages.roblox.com/v1/messages/unread/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load unread private message count';\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadUnreadMessageCount(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getUnreadMessageCount;\n","import { default as getUnreadMessageCount } from './getUnreadMessageCount';\nglobalThis.privateMessagesService = { getUnreadMessageCount };\nexport { getUnreadMessageCount };\n","import { sendMessage, addListener } from '../message';\n// Destination to be used with messaging.\nconst messageDestinationPrefix = 'settingsService';\n// Fetches a locally stored setting value by its key.\nconst getSettingValue = (key) => {\n    return sendMessage(`${messageDestinationPrefix}.getSettingValue`, {\n        key,\n    });\n};\n// Gets a boolean setting value, toggled to false by default.\nconst getToggleSettingValue = async (key) => {\n    const value = await getSettingValue(key);\n    return !!value;\n};\n// Locally stores a setting value.\nconst setSettingValue = (key, value) => {\n    return sendMessage(`${messageDestinationPrefix}.setSettingValue`, {\n        key,\n        value,\n    });\n};\nconst getValueFromLocalStorage = (key) => {\n    if (!localStorage.hasOwnProperty(key)) {\n        return undefined;\n    }\n    try {\n        const valueArray = JSON.parse(localStorage[key]);\n        if (Array.isArray(valueArray) && valueArray.length > 0) {\n            return valueArray[0];\n        }\n        console.warn(`Setting value in localStorage invalid: ${localStorage[key]} - removing it.`);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n    catch (err) {\n        console.warn(`Failed to parse '${key}' value from localStorage - removing it.`, err);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n};\naddListener(`${messageDestinationPrefix}.getSettingValue`, ({ key }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        const value = getValueFromLocalStorage(key);\n        if (value !== undefined) {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(value);\n            });\n        }\n        else {\n            chrome.storage.local.get(key, (values) => {\n                resolve(values[key]);\n            });\n        }\n    });\n});\naddListener(`${messageDestinationPrefix}.setSettingValue`, ({ key, value }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        if (value === undefined) {\n            chrome.storage.local.remove(key, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n        else {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n    });\n});\nglobalThis.settingsService = { getSettingValue, getToggleSettingValue, setSettingValue };\nexport { getSettingValue, getToggleSettingValue, setSettingValue };\n","import { Batch } from '@tix-factory/batch';\nimport ThumbnailState from '../../enums/thumbnailState';\nclass ThumbnailBatchProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 1 * 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const response = await fetch('https://thumbnails.roblox.com/v1/batch', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(items.map(({ value }) => {\n                return {\n                    requestId: `${value.type}_${value.targetId}_${value.size}`,\n                    type: value.type,\n                    targetId: value.targetId,\n                    size: value.size,\n                };\n            })),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to load thumbnails');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const thumbnail = result.data.find((t) => t.requestId ===\n                `${item.value.type}_${item.value.targetId}_${item.value.size}`);\n            if (thumbnail) {\n                const thumbnailState = thumbnail.state;\n                item.resolve({\n                    state: thumbnailState,\n                    imageUrl: thumbnailState === ThumbnailState.Completed\n                        ? thumbnail.imageUrl\n                        : '',\n                });\n            }\n            else {\n                item.resolve({\n                    state: ThumbnailState.Error,\n                    imageUrl: '',\n                });\n            }\n        });\n    }\n}\nconst thumbnailBatchProcessor = new ThumbnailBatchProcessor();\nexport default thumbnailBatchProcessor;\n","import ThumbnailState from '../../enums/thumbnailState';\nimport ThumbnailType from '../../enums/thumbnailType';\nimport ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nimport batchProcessor from './batchProcessor';\nconst messageDestination = 'thumbnailsService.getAvatarHeadshotThumbnail';\nconst cache = new ExpirableDictionary(messageDestination, 5 * 60 * 1000);\n// Fetches the list of friends for the user.\nconst getAvatarHeadshotThumbnail = (userId) => {\n    return sendMessage(messageDestination, {\n        userId,\n    });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, async (message) => {\n    // Check the cache\n    const thumbnail = await cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    batchProcessor.enqueue({\n        type: ThumbnailType.AvatarHeadShot,\n        targetId: message.userId,\n        size: '420x420',\n    }));\n    if (thumbnail.state !== ThumbnailState.Completed) {\n        setTimeout(() => {\n            // If the thumbnail isn't complete, evict it from the cache early.\n            cache.evict(`${message.userId}`);\n        }, 30 * 1000);\n    }\n    return thumbnail;\n});\nexport default getAvatarHeadshotThumbnail;\n","import { default as getAvatarHeadshotThumbnail } from './getAvatarHeadshotThumbnail';\nglobalThis.thumbnailsService = { getAvatarHeadshotThumbnail };\nexport { getAvatarHeadshotThumbnail };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'tradesService.getTradeCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the unread private message count for the currently authenticated user.\nconst getTradeCount = (tradeStatusType) => {\n    return sendMessage(messageDestination, {\n        tradeStatusType,\n    });\n};\n// Loads the unread private message count for the authenticated user.\nconst loadTradeCount = async (tradeStatusType) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://trades.roblox.com/v1/trades/${tradeStatusType}/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw `Failed to load ${tradeStatusType} trade count`;\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.tradeStatusType}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadTradeCount(message.tradeStatusType));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getTradeCount;\n","import { default as getTradeCount } from './getTradeCount';\nglobalThis.tradesService = { getTradeCount };\nexport { getTradeCount };\n","import { addListener, sendMessage } from '../message';\nconst messageDestination = 'usersService.getAuthenticatedUser';\nconst cacheDuration = 60 * 1000;\nlet authenticatedUser = undefined;\n// Fetches the currently authenticated user.\nconst getAuthenticatedUser = () => {\n    return sendMessage(messageDestination, {});\n};\n// Loads the currently authenticated user.\nconst loadAuthenticatedUser = async () => {\n    if (authenticatedUser !== undefined) {\n        return authenticatedUser;\n    }\n    try {\n        const response = await fetch('https://users.roblox.com/v1/users/authenticated');\n        if (response.status === 401) {\n            return (authenticatedUser = null);\n        }\n        else if (!response.ok) {\n            throw new Error('Failed to load authenticated user');\n        }\n        const result = await response.json();\n        return (authenticatedUser = {\n            id: result.id,\n            name: result.name,\n            displayName: result.displayName,\n        });\n    }\n    finally {\n        setTimeout(() => {\n            authenticatedUser = undefined;\n        }, cacheDuration);\n    }\n};\naddListener(messageDestination, () => loadAuthenticatedUser(), {\n    levelOfParallelism: 1,\n});\nexport default getAuthenticatedUser;\n","import { default as getAuthenticatedUser } from './getAuthenticatedUser';\nglobalThis.usersService = { getAuthenticatedUser };\nexport { getAuthenticatedUser };\n","// This class can be used to concurrently cache items, or fetch their values.\nclass ExpirableDictionary {\n    lockKey;\n    expirationInMilliseconds;\n    // The items that are in the dictionary.\n    items = {};\n    constructor(\n    // A name for the dictionary, used for locking.\n    name, \n    // How long the item will remain in the dictionary, in milliseconds.\n    expirationInMilliseconds) {\n        this.lockKey = `ExpirableDictionary:${name}`;\n        this.expirationInMilliseconds = expirationInMilliseconds;\n    }\n    // Tries to fetch an item by its key from the dictionary, or it will call the value factory to add it in.\n    getOrAdd(key, valueFactory) {\n        const item = this.items[key];\n        if (item !== undefined) {\n            return Promise.resolve(item);\n        }\n        return new Promise((resolve, reject) => {\n            navigator.locks\n                .request(`${this.lockKey}:${key}`, async () => {\n                // It's possible the item was added since we requested the lock, check again.\n                const item = this.items[key];\n                if (item !== undefined) {\n                    resolve(item);\n                    return;\n                }\n                try {\n                    const value = (this.items[key] = await valueFactory());\n                    setTimeout(() => this.evict(key), this.expirationInMilliseconds);\n                    resolve(value);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    evict(key) {\n        delete this.items[key];\n    }\n}\nexport default ExpirableDictionary;\n","import ExpirableDictionary from './expireableDictionary';\nconst cache = new ExpirableDictionary('fetchDataUri', 5 * 60 * 1000);\n// Converts a URL to a data URI of its loaded contents.\nexport default (url) => {\n    return cache.getOrAdd(url.href, () => {\n        return new Promise((resolve, reject) => {\n            fetch(url.href)\n                .then((result) => {\n                const reader = new FileReader();\n                reader.onerror = (err) => {\n                    reject(err);\n                };\n                reader.onloadend = () => {\n                    if (typeof reader.result === 'string') {\n                        resolve(reader.result);\n                    }\n                    else {\n                        reject(new Error(`fetchDataUri: Unexpected result type (${typeof reader.result})`));\n                    }\n                };\n                result\n                    .blob()\n                    .then((blob) => {\n                    reader.readAsDataURL(blob);\n                })\n                    .catch(reject);\n            })\n                .catch(reject);\n        });\n    });\n};\n","import { isBackgroundPage } from '../constants';\nimport { addListener, getWorkerTab, sendMessage, sendMessageToTab, } from '../services/message';\nconst messageDestination = 'launchProtocolUrl';\n// Keep track of the tabs, so we can put the user back where they were.b\nlet previousTab = undefined;\nlet protocolLauncherTab = undefined;\n// Attempt to launch the protocol URL in the current tab.\nconst tryDirectLaunch = (protocolUrl) => {\n    if (!isBackgroundPage && location) {\n        location.href = protocolUrl;\n        return true;\n    }\n    return false;\n};\n// Launch the protocol URL from a service worker.\nconst launchProtocolUrl = (protocolUrl) => {\n    if (tryDirectLaunch(protocolUrl)) {\n        // We were able to directly launch the protocol URL.\n        // Nothing more to do.\n        return Promise.resolve();\n    }\n    const workerTab = getWorkerTab();\n    if (workerTab) {\n        // If we're in the background, and we have a tab that can process the protocol URL, use that instead.\n        // This will ensure that when we use the protocol launcher to launch Roblox, that they have the highest\n        // likihood of already having accepted the protocol launcher permission.\n        sendMessageToTab(messageDestination, {\n            protocolUrl,\n        }, workerTab);\n        return Promise.resolve();\n    }\n    // TODO: Convert to promise signatures when moving to manifest V3.\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true,\n    }, (currentTab) => {\n        previousTab = currentTab[0];\n        if (previousTab) {\n            // Try to open the protocol launcher tab right next to the current tab, so that when it\n            // closes, it will put the user back on the tab they are on now.\n            chrome.tabs.create({\n                url: protocolUrl,\n                index: previousTab.index + 1,\n                windowId: previousTab.windowId,\n            }, (tab) => {\n                protocolLauncherTab = tab;\n            });\n        }\n        else {\n            chrome.tabs.create({ url: protocolUrl });\n            // If we don't know where they were before, then don't try to keep track of anything.\n            previousTab = undefined;\n            protocolLauncherTab = undefined;\n        }\n    });\n    return Promise.resolve();\n};\nif (isBackgroundPage) {\n    chrome.tabs.onRemoved.addListener((tabId) => {\n        // Return the user to the tab they were on before, when we're done launching the protocol URL.\n        // chrome self-closes the protocol URL tab when opened.\n        if (tabId === protocolLauncherTab?.id && previousTab?.id) {\n            chrome.tabs.update(previousTab.id, {\n                active: true,\n            });\n        }\n        previousTab = undefined;\n        protocolLauncherTab = undefined;\n    });\n}\naddListener(messageDestination, (message) => launchProtocolUrl(message.protocolUrl));\n// Launches a protocol URL, using the most user-friendly method.\nexport default async (protocolUrl) => {\n    if (tryDirectLaunch(protocolUrl)) {\n        // If we can directly launch the protocol URL, there's nothing left to do.\n        return;\n    }\n    // Otherwise, we have to send a message out and try some nonsense.\n    await sendMessage(messageDestination, { protocolUrl });\n};\n","const getSEOLink = (id, name, path) => {\n    if (!name) {\n        name = 'redirect';\n    }\n    else {\n        name =\n            name\n                .replace(/'/g, '')\n                .replace(/\\W+/g, '-')\n                .replace(/^-+/, '')\n                .replace(/-+$/, '') || 'redirect';\n    }\n    return new URL(`https://www.roblox.com/${path}/${id}/${name}`);\n};\nconst getCatalogLink = (assetId, assetName) => {\n    return getSEOLink(assetId, assetName, 'catalog');\n};\nconst getLibraryLink = (assetId, assetName) => {\n    return getSEOLink(assetId, assetName, 'library');\n};\nconst getPlaceLink = (placeId, placeName) => {\n    return getSEOLink(placeId, placeName, 'games');\n};\nconst getUserProfileLink = (userId) => {\n    return getSEOLink(userId, 'profile', 'users');\n};\nconst getIdFromUrl = (url) => {\n    const match = url.pathname.match(/^\\/(badges|games|game-pass|groups|catalog|library|users)\\/(\\d+)\\//i) || [];\n    // Returns NaN if the URL doesn't match.\n    return Number(match[2]);\n};\nexport { getCatalogLink, getLibraryLink, getPlaceLink, getUserProfileLink, getIdFromUrl, };\n","export default (time) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, time);\n    });\n};\n","const headerName = 'X-CSRF-Token';\nlet xsrfToken = '';\n// A fetch request which will attach an X-CSRF-Token in all outbound requests.\nconst xsrfFetch = async (url, requestDetails) => {\n    if (url.hostname.endsWith('.roblox.com')) {\n        if (!requestDetails) {\n            requestDetails = {};\n        }\n        requestDetails.credentials = 'include';\n        if (!requestDetails.headers) {\n            requestDetails.headers = new Headers();\n        }\n        if (requestDetails.headers instanceof Headers) {\n            if (xsrfToken) {\n                requestDetails.headers.set(headerName, xsrfToken);\n            }\n            if (requestDetails.body && !requestDetails.headers.has('Content-Type')) {\n                requestDetails.headers.set('Content-Type', 'application/json');\n            }\n        }\n    }\n    const response = await fetch(url, requestDetails);\n    const token = response.headers.get(headerName);\n    if (response.ok || !token) {\n        return response;\n    }\n    xsrfToken = token;\n    return xsrfFetch(url, requestDetails);\n};\nexport default xsrfFetch;\n","import PromiseQueue from '../promise-queue';\nimport ErrorEvent from '../events/errorEvent';\nimport ItemErrorEvent from '../events/itemErrorEvent';\n// A class for batching and processing multiple single items into a single call.\nclass Batch extends EventTarget {\n    queueMap = {};\n    promiseMap = {};\n    limiter;\n    concurrencyHandler;\n    // All the batch items waiting to be processed.\n    queueArray = [];\n    // The configuration for this batch processor.\n    config;\n    constructor(configuration) {\n        super();\n        this.config = configuration;\n        this.limiter = new PromiseQueue({\n            levelOfParallelism: 1,\n            delayInMilliseconds: configuration.minimumDelay || 0,\n        });\n        this.concurrencyHandler = new PromiseQueue({\n            levelOfParallelism: configuration.levelOfParallelism || Infinity,\n        });\n    }\n    // Enqueues an item into a batch, to be processed.\n    enqueue(item) {\n        return new Promise((resolve, reject) => {\n            const key = this.getKey(item);\n            const promiseMap = this.promiseMap;\n            const queueArray = this.queueArray;\n            const queueMap = this.queueMap;\n            const retryCount = this.config.retryCount || 0;\n            const getRetryDelay = this.getRetryDelay.bind(this);\n            const dispatchEvent = this.dispatchEvent.bind(this);\n            const check = this.check.bind(this);\n            // Step 1: Ensure we have a way to resolve/reject the promise for this item.\n            const mergedPromise = promiseMap[key] || [];\n            if (mergedPromise.length < 0) {\n                this.promiseMap[key] = mergedPromise;\n            }\n            mergedPromise.push({ resolve, reject });\n            // Step 2: Check if we have the batched item created.\n            if (!queueMap[key]) {\n                const remove = (item) => {\n                    // Mark the item as completed, so we know we either resolved or rejected it.\n                    item.completed = true;\n                    for (let i = 0; i < queueArray.length; i++) {\n                        if (queueArray[i].key === key) {\n                            queueArray.splice(i, 1);\n                            break;\n                        }\n                    }\n                    delete promiseMap[key];\n                    delete queueMap[key];\n                };\n                const batchItem = {\n                    key,\n                    value: item,\n                    attempt: 0,\n                    retryAfter: 0,\n                    completed: false,\n                    resolve(result) {\n                        // We're not accepting any new items for this resolution.\n                        remove(this);\n                        // Defer the resolution until after the thread resolves.\n                        setTimeout(() => {\n                            // Process anyone who applied.\n                            while (mergedPromise.length > 0) {\n                                const promise = mergedPromise.shift();\n                                promise?.resolve(result);\n                            }\n                        }, 0);\n                    },\n                    reject(error) {\n                        // Defer the resolution until after the thread resolves.\n                        const retryDelay = this.attempt <= retryCount ? getRetryDelay(this) : undefined;\n                        const retryAfter = retryDelay !== undefined\n                            ? performance.now() + retryDelay\n                            : undefined;\n                        // Emit an event to notify that the item failed to process.\n                        dispatchEvent(new ItemErrorEvent(error, this, retryAfter));\n                        if (retryAfter !== undefined) {\n                            // The item can be retried, we haven't hit the maximum number of attempts yet.\n                            this.retryAfter = retryAfter;\n                            // Ensure the check runs after the retry delay.\n                            setTimeout(check, retryDelay);\n                        }\n                        else {\n                            // Remove the item, and reject anyone waiting on it.\n                            remove(this);\n                            // Defer the resolution until after the thread resolves.\n                            setTimeout(() => {\n                                // Process anyone who applied.\n                                while (mergedPromise.length > 0) {\n                                    const promise = mergedPromise.shift();\n                                    promise?.reject(error);\n                                }\n                            }, 0);\n                        }\n                    },\n                };\n                queueMap[key] = batchItem;\n                queueArray.push(batchItem);\n            }\n            // Attempt to process the queue on the next event loop.\n            setTimeout(check, this.config.enqueueDeferDelay);\n        });\n    }\n    // Batches together queued items, calls the process method.\n    // Will do nothing if the config requirements aren't met.\n    check() {\n        if (this.limiter.size > 0) {\n            // Already being checked.\n            return;\n        }\n        // We're using p-limit to ensure that multiple process calls can't be called at once.\n        this.limiter.enqueue(this._check.bind(this)).catch((err) => {\n            // This should be \"impossible\".. right?\n            this.dispatchEvent(new ErrorEvent(err));\n        });\n    }\n    // The actual implementation of the check method.\n    _check() {\n        const retry = this.check.bind(this);\n        // Get a batch of items to process.\n        const batch = this.getBatch();\n        // Nothing in the queue ready to be processed.\n        if (batch.length < 1) {\n            return Promise.resolve();\n        }\n        // Update the items that we're about to process, so they don't get double processed.\n        batch.forEach((item) => {\n            item.attempt += 1;\n            item.retryAfter = Infinity;\n        });\n        setTimeout(async () => {\n            try {\n                await this.concurrencyHandler.enqueue(this.process.bind(this, batch));\n            }\n            catch (err) {\n                this.dispatchEvent(new ErrorEvent(err));\n            }\n            finally {\n                batch.forEach((item) => {\n                    if (item.completed) {\n                        // Item completed its processing, nothing more to do.\n                        return;\n                    }\n                    else if (item.retryAfter > 0 && item.retryAfter !== Infinity) {\n                        // The item failed to process, but it is going to be retried.\n                        return;\n                    }\n                    else {\n                        // Item neither rejected, or completed its processing status.\n                        // This is a requirement, so we reject the item.\n                        item.reject(new Error('Item was not marked as resolved or rejected after batch processing completed.'));\n                    }\n                });\n                // Now that we've finished processing the batch, run the process again, just in case there's anything left.\n                setTimeout(retry, 0);\n            }\n        }, 0);\n        if (batch.length >= this.config.maxSize) {\n            // We have the maximum number of items in the batch, let's make sure we kick off the process call again.\n            setTimeout(retry, this.config.minimumDelay);\n        }\n        return Promise.resolve();\n    }\n    getBatch() {\n        const now = performance.now();\n        const batch = [];\n        for (let i = 0; i < this.queueArray.length; i++) {\n            const batchItem = this.queueArray[i];\n            if (batchItem.retryAfter > now) {\n                // Item is not ready to be retried, or it is currently being processed.\n                continue;\n            }\n            batch.push(batchItem);\n            if (batch.length >= this.config.maxSize) {\n                break;\n            }\n        }\n        return batch;\n    }\n    // Obtains a unique key to identify the item.\n    // This is used to deduplicate the batched items.\n    getKey(item) {\n        return item === undefined ? 'undefined' : JSON.stringify(item);\n    }\n    // Returns how long to wait before retrying the item.\n    getRetryDelay(item) {\n        return 0;\n    }\n    // Called when it is time to process a batch of items.\n    process(items) {\n        return Promise.reject(new Error('Inherit this class, and implement the processBatch method.'));\n    }\n}\nexport default Batch;\n","// An event class which can be used to emit an error.\nclass ErrorEvent extends Event {\n    // The error associated with the event.\n    error;\n    // Constructs the event from the error.\n    constructor(error) {\n        super('error');\n        this.error = error;\n    }\n}\nexport default ErrorEvent;\n","import ErrorEvent from './errorEvent';\n// An event class which can be used to emit an error event for an item that failed to process.\nclass ItemErrorEvent extends ErrorEvent {\n    // The item that failed to process.\n    batchItem;\n    // The amount of time when the item will be retried.\n    retryAfter;\n    // Constructs the event from the error.\n    constructor(error, batchItem, retryAfter) {\n        super(error);\n        this.batchItem = batchItem;\n        this.retryAfter = retryAfter;\n    }\n}\nexport default ItemErrorEvent;\n","// Export all the things from this module.\nexport { default as Batch } from './batch';\nexport { default as ErrorEvent } from './events/errorEvent';\nexport { default as ItemErrorEvent } from './events/itemErrorEvent';\nexport { default as PromiseQueue } from './promise-queue';\n","// A limiter for running promises in parallel.\n// Queue ensures order is maintained.\nclass PromiseQueue {\n    // All the promises that have been enqueued, and are waiting to be processed.\n    queue = [];\n    // The PromiseQueue configuration.\n    config;\n    // How many promises are actively being processed.\n    activeCount = 0;\n    // The next time a promise can be processed.\n    nextProcessTime = 0;\n    // Constructs a promise queue, defining the number of promises that may run in parallel.\n    constructor(config) {\n        this.config = config;\n    }\n    // The number of promises waiting to be processed.\n    get size() {\n        return this.queue.length;\n    }\n    // Puts a function that will create the promise to run on the queue, and returns a promise\n    // that will return the result of the enqueued promise.\n    enqueue(createPromise) {\n        return new Promise(async (resolve, reject) => {\n            this.queue.push({\n                deferredPromise: { resolve, reject },\n                createPromise,\n            });\n            await this.process();\n        });\n    }\n    async process() {\n        if (this.activeCount >= this.config.levelOfParallelism) {\n            // Already running max number of promises in parallel.\n            return;\n        }\n        const reprocess = this.process.bind(this);\n        const delayInMilliseconds = this.config.delayInMilliseconds;\n        if (delayInMilliseconds !== undefined && delayInMilliseconds > 0) {\n            const now = performance.now();\n            const remainingTime = this.nextProcessTime - now;\n            if (remainingTime > 0) {\n                // We're not allowed to process the next promise yet.\n                setTimeout(reprocess, remainingTime);\n                return;\n            }\n            this.nextProcessTime = now + delayInMilliseconds;\n        }\n        const promise = this.queue.shift();\n        if (!promise) {\n            // No promise to process.\n            return;\n        }\n        this.activeCount++;\n        try {\n            const result = await promise.createPromise();\n            promise.deferredPromise.resolve(result);\n        }\n        catch (err) {\n            promise.deferredPromise.reject(err);\n        }\n        finally {\n            // Ensure we subtract from how many promises are active\n            this.activeCount--;\n            // And then run the process function again, in case there are any promises left to run.\n            setTimeout(reprocess, 0);\n        }\n    }\n}\nexport default PromiseQueue;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * as badges from '../services/badges';\nexport * as currency from '../services/currency';\nexport * as followings from '../services/followings';\nexport * as friends from '../services/friends';\nexport * as gameLaunch from '../services/game-launch';\nexport * as inventory from '../services/inventory';\nexport * as localization from '../services/localization';\nexport * as message from '../services/message';\nexport * as presence from '../services/presence';\nexport * as privateMessages from '../services/private-messages';\nexport * as settings from '../services/settings';\nexport * as thumbnails from '../services/thumbnails';\nexport * as trades from '../services/trades';\nexport * as users from '../services/users';\nexport * from './notifiers';\n"],"names":[],"sourceRoot":""}