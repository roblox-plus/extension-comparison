{"version":3,"file":"./pages/item-details.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://roblox-plus/./src/css/pages/item-details.scss","webpack://roblox-plus/./src/js/components/system-feedback/index.ts","webpack://roblox-plus/./src/js/constants/index.ts","webpack://roblox-plus/./src/js/enums/assetType.ts","webpack://roblox-plus/./src/js/pages/item-details/avatar.ts","webpack://roblox-plus/./src/js/pages/item-details/calculate-rap-after-sale.ts","webpack://roblox-plus/./src/js/pages/item-details/context-menu.ts","webpack://roblox-plus/./src/js/pages/item-details/details.ts","webpack://roblox-plus/./src/js/pages/item-details/download.ts","webpack://roblox-plus/./src/js/pages/item-details/stats.ts","webpack://roblox-plus/./src/js/services/assets/get-asset-contents-url.ts","webpack://roblox-plus/./src/js/services/assets/get-asset-sales-count.ts","webpack://roblox-plus/./src/js/services/assets/index.ts","webpack://roblox-plus/./src/js/services/avatar/get-avatar-asset-rules.ts","webpack://roblox-plus/./src/js/services/avatar/index.ts","webpack://roblox-plus/./src/js/services/localization/index.ts","webpack://roblox-plus/./src/js/services/message/index.ts","webpack://roblox-plus/./src/js/services/settings/index.ts","webpack://roblox-plus/./src/js/utils/authenticatedUser.ts","webpack://roblox-plus/./src/js/utils/expireableDictionary.ts","webpack://roblox-plus/./src/js/utils/linkify.ts","webpack://roblox-plus/./src/js/utils/wait.ts","webpack://roblox-plus/./src/js/utils/xsrfFetch.ts","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/batch/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/errorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/itemErrorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/promise-queue/index.js","webpack://roblox-plus/webpack/bootstrap","webpack://roblox-plus/webpack/runtime/define property getters","webpack://roblox-plus/webpack/runtime/hasOwnProperty shorthand","webpack://roblox-plus/webpack/runtime/make namespace object","webpack://roblox-plus/./src/js/pages/item-details/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","const getSystemFeedbackContainer = () => {\n    const systemFeedbackContainer = document.querySelector('.system-feedback');\n    if (systemFeedbackContainer instanceof HTMLElement) {\n        return systemFeedbackContainer;\n    }\n    const container = document.createElement('div');\n    container.setAttribute('class', 'system-feedback');\n    document.body.appendChild(container);\n    return container;\n};\nconst createBanner = (text, bannerType) => {\n    const systemFeedbackContainer = getSystemFeedbackContainer();\n    const container = document.createElement('div');\n    container.classList.add('alert-system-feedback');\n    systemFeedbackContainer?.appendChild(container);\n    const label = document.createElement('div');\n    label.innerText = text;\n    label.setAttribute('class', `alert alert-${bannerType}`);\n    container.appendChild(label);\n    return label;\n};\nconst showBanner = (text, bannerType, timeout) => {\n    const banner = createBanner(text, bannerType);\n    setTimeout(() => {\n        banner.classList.remove('on');\n        setTimeout(() => {\n            banner.parentElement?.remove();\n        }, 10 * 1000);\n    }, timeout);\n    setTimeout(() => {\n        banner.classList.add('on');\n    }, 100);\n};\n// Renders an error feedback banner on the web page, temporarily.\nconst showErrorBanner = (text, timeout) => {\n    showBanner(text, 'warning', timeout);\n};\n// Renders a success feedback banner on the web page, temporarily.\nconst showSuccessBanner = (text, timeout) => {\n    showBanner(text, 'success', timeout);\n};\nexport { showErrorBanner, showSuccessBanner };\n","const manifest = chrome.runtime.getManifest();\nconst isBackgroundPage = chrome.runtime.getURL(manifest.background?.page || '') === location.href;\nexport { manifest, isBackgroundPage };\n","var AssetType;\n(function (AssetType) {\n    AssetType[AssetType[\"Image\"] = 1] = \"Image\";\n    AssetType[AssetType[\"TShirt\"] = 2] = \"TShirt\";\n    AssetType[AssetType[\"Audio\"] = 3] = \"Audio\";\n    AssetType[AssetType[\"Mesh\"] = 4] = \"Mesh\";\n    AssetType[AssetType[\"Lua\"] = 5] = \"Lua\";\n    AssetType[AssetType[\"Html\"] = 6] = \"Html\";\n    AssetType[AssetType[\"Text\"] = 7] = \"Text\";\n    AssetType[AssetType[\"Hat\"] = 8] = \"Hat\";\n    AssetType[AssetType[\"Place\"] = 9] = \"Place\";\n    AssetType[AssetType[\"Model\"] = 10] = \"Model\";\n    AssetType[AssetType[\"Shirt\"] = 11] = \"Shirt\";\n    AssetType[AssetType[\"Pants\"] = 12] = \"Pants\";\n    AssetType[AssetType[\"Decal\"] = 13] = \"Decal\";\n    AssetType[AssetType[\"Avatar\"] = 16] = \"Avatar\";\n    AssetType[AssetType[\"Head\"] = 17] = \"Head\";\n    AssetType[AssetType[\"Face\"] = 18] = \"Face\";\n    AssetType[AssetType[\"Gear\"] = 19] = \"Gear\";\n    AssetType[AssetType[\"Badge\"] = 21] = \"Badge\";\n    AssetType[AssetType[\"GroupEmblem\"] = 22] = \"GroupEmblem\";\n    AssetType[AssetType[\"Animation\"] = 24] = \"Animation\";\n    AssetType[AssetType[\"Arms\"] = 25] = \"Arms\";\n    AssetType[AssetType[\"Legs\"] = 26] = \"Legs\";\n    AssetType[AssetType[\"Torso\"] = 27] = \"Torso\";\n    AssetType[AssetType[\"RightArm\"] = 28] = \"RightArm\";\n    AssetType[AssetType[\"LeftArm\"] = 29] = \"LeftArm\";\n    AssetType[AssetType[\"LeftLeg\"] = 30] = \"LeftLeg\";\n    AssetType[AssetType[\"RightLeg\"] = 31] = \"RightLeg\";\n    AssetType[AssetType[\"Package\"] = 32] = \"Package\";\n    AssetType[AssetType[\"YouTubeVideo\"] = 33] = \"YouTubeVideo\";\n    AssetType[AssetType[\"GamePass\"] = 34] = \"GamePass\";\n    AssetType[AssetType[\"App\"] = 35] = \"App\";\n    AssetType[AssetType[\"Code\"] = 37] = \"Code\";\n    AssetType[AssetType[\"Plugin\"] = 38] = \"Plugin\";\n    AssetType[AssetType[\"SolidModel\"] = 39] = \"SolidModel\";\n    AssetType[AssetType[\"MeshPart\"] = 40] = \"MeshPart\";\n    AssetType[AssetType[\"HairAccessory\"] = 41] = \"HairAccessory\";\n    AssetType[AssetType[\"FaceAccessory\"] = 42] = \"FaceAccessory\";\n    AssetType[AssetType[\"NeckAccessory\"] = 43] = \"NeckAccessory\";\n    AssetType[AssetType[\"ShoulderAccessory\"] = 44] = \"ShoulderAccessory\";\n    AssetType[AssetType[\"FrontAccessory\"] = 45] = \"FrontAccessory\";\n    AssetType[AssetType[\"BackAccessory\"] = 46] = \"BackAccessory\";\n    AssetType[AssetType[\"WaistAccessory\"] = 47] = \"WaistAccessory\";\n    AssetType[AssetType[\"ClimbAnimation\"] = 48] = \"ClimbAnimation\";\n    AssetType[AssetType[\"DeathAnimation\"] = 49] = \"DeathAnimation\";\n    AssetType[AssetType[\"FallAnimation\"] = 50] = \"FallAnimation\";\n    AssetType[AssetType[\"IdleAnimation\"] = 51] = \"IdleAnimation\";\n    AssetType[AssetType[\"JumpAnimation\"] = 52] = \"JumpAnimation\";\n    AssetType[AssetType[\"RunAnimation\"] = 53] = \"RunAnimation\";\n    AssetType[AssetType[\"SwimAnimation\"] = 54] = \"SwimAnimation\";\n    AssetType[AssetType[\"WalkAnimation\"] = 55] = \"WalkAnimation\";\n    AssetType[AssetType[\"PoseAnimation\"] = 56] = \"PoseAnimation\";\n    AssetType[AssetType[\"EarAccessory\"] = 57] = \"EarAccessory\";\n    AssetType[AssetType[\"EyeAccessory\"] = 58] = \"EyeAccessory\";\n    AssetType[AssetType[\"LocalizationTableManifest\"] = 59] = \"LocalizationTableManifest\";\n    AssetType[AssetType[\"LocalizationTableTranslation\"] = 60] = \"LocalizationTableTranslation\";\n    AssetType[AssetType[\"Emote\"] = 61] = \"Emote\";\n    AssetType[AssetType[\"Video\"] = 62] = \"Video\";\n    AssetType[AssetType[\"TexturePack\"] = 63] = \"TexturePack\";\n    AssetType[AssetType[\"TShirtAccessory\"] = 64] = \"TShirtAccessory\";\n    AssetType[AssetType[\"ShirtAccessory\"] = 65] = \"ShirtAccessory\";\n    AssetType[AssetType[\"PantsAccessory\"] = 66] = \"PantsAccessory\";\n    AssetType[AssetType[\"JacketAccessory\"] = 67] = \"JacketAccessory\";\n    AssetType[AssetType[\"SweaterAccessory\"] = 68] = \"SweaterAccessory\";\n    AssetType[AssetType[\"ShortsAccessory\"] = 69] = \"ShortsAccessory\";\n    AssetType[AssetType[\"LeftShoeAccessory\"] = 70] = \"LeftShoeAccessory\";\n    AssetType[AssetType[\"RightShoeAccessory\"] = 71] = \"RightShoeAccessory\";\n    AssetType[AssetType[\"DressSkirtAccessory\"] = 72] = \"DressSkirtAccessory\";\n    AssetType[AssetType[\"FontFamily\"] = 73] = \"FontFamily\";\n    AssetType[AssetType[\"FontFace\"] = 74] = \"FontFace\";\n    AssetType[AssetType[\"MeshHiddenSurfaceRemoval\"] = 75] = \"MeshHiddenSurfaceRemoval\";\n    AssetType[AssetType[\"EyebrowAccessory\"] = 76] = \"EyebrowAccessory\";\n    AssetType[AssetType[\"EyelashAccessory\"] = 77] = \"EyelashAccessory\";\n    AssetType[AssetType[\"MoodAnimation\"] = 78] = \"MoodAnimation\";\n    AssetType[AssetType[\"DynamicHead\"] = 79] = \"DynamicHead\";\n})(AssetType || (AssetType = {}));\nexport default AssetType;\n","import authenticatedUser from '../../utils/authenticatedUser';\nimport { getAvatarAssetRules, getAvatarAssets, removeItem, wearItem, } from '../../services/avatar';\nimport { showErrorBanner, showSuccessBanner, } from '../../components/system-feedback';\nimport { getTranslationResource } from '../../services/localization';\nimport { assetId, assetType } from './details';\nconst initializeContextMenu = (createContextMenuButton) => {\n    if (!authenticatedUser) {\n        return;\n    }\n    getAvatarAssetRules()\n        .then(async (avatarRules) => {\n        const avatarRule = avatarRules.find((rule) => rule.assetType === assetType);\n        if (!avatarRule) {\n            // Not an avatar asset.\n            return;\n        }\n        const assets = await getAvatarAssets(authenticatedUser?.id || 0);\n        const isWearing = !!assets.find((a) => a.id === assetId);\n        if (isWearing) {\n            // Already wearing the item\n            const removeText = await getTranslationResource('Feature.Item', 'Action.TakeOff');\n            const removeItemButton = createContextMenuButton(removeText);\n            removeItemButton.addEventListener('click', async () => {\n                try {\n                    await removeItem(assetId);\n                    showSuccessBanner('Item removed from avatar', 5 * 1000);\n                }\n                catch (e) {\n                    console.error('Failed to remove item', e);\n                    showErrorBanner('Failed to remove item from avatar.', 5 * 1000);\n                }\n            });\n        }\n        else {\n            // Not wearing the item\n            const wearButtonText = await getTranslationResource('Feature.Item', 'Action.Wear');\n            const wearItemButton = createContextMenuButton(wearButtonText);\n            wearItemButton.addEventListener('click', async () => {\n                if (!authenticatedUser) {\n                    return;\n                }\n                try {\n                    await wearItem(assetId, authenticatedUser.id);\n                    showSuccessBanner(`Item added to avatar`, 5 * 1000);\n                }\n                catch (e) {\n                    console.error('Failed to wear item', e);\n                    showErrorBanner('Failed to wear item on avatar.', 5 * 1000);\n                }\n            });\n        }\n    })\n        .catch((err) => {\n        console.error('Failed to load avatar rules', err);\n    });\n};\nexport { initializeContextMenu };\n","const calculateRecentAveragePriceAfterSale = (currentAveragePrice, priceToSellFor) => {\n    if (currentAveragePrice === priceToSellFor) {\n        return currentAveragePrice;\n    }\n    if (currentAveragePrice <= 0) {\n        return priceToSellFor;\n    }\n    return (currentAveragePrice > priceToSellFor ? Math.floor : Math.ceil)(currentAveragePrice * 0.9 + priceToSellFor * 0.1);\n};\nexport default calculateRecentAveragePriceAfterSale;\n","import AssetType from '../../enums/assetType';\nimport authenticatedUser from '../../utils/authenticatedUser';\nimport { initializeContextMenu } from './avatar';\nimport { assetId, assetType, isOwnCreatedItem, isOwnedAvatarAsset, isOwnedStudioItem, } from './details';\nimport { createDownloadLink } from './download';\n// Creates an individual context menu button\nconst createContextMenuButton = (contextMenu, label) => {\n    const listItem = document.createElement('li');\n    listItem.classList.add('rplus-list-item');\n    contextMenu?.appendChild(listItem);\n    const button = document.createElement('button');\n    button.innerText = label;\n    button.setAttribute('role', 'button');\n    listItem.appendChild(button);\n    return button;\n};\n// Any option that needs to be added to the context menu should exist in here.\nconst addContextMenuOptions = async (contextMenu) => {\n    // If the item is an owned avatar asset, attempt to add the wear + remove button to the context menu, when it opens.\n    if (isOwnedAvatarAsset() &&\n        assetType !== AssetType.Emote &&\n        !isNaN(assetId) &&\n        authenticatedUser) {\n        initializeContextMenu((text) => createContextMenuButton(contextMenu, text));\n    }\n    // Add download button when the item is made by the authenticated user.\n    if (isOwnCreatedItem || isOwnedStudioItem) {\n        const downloadLink = await createDownloadLink();\n        if (downloadLink) {\n            const downloadButton = createContextMenuButton(contextMenu, '');\n            downloadButton.parentElement?.appendChild(downloadLink);\n            downloadButton.remove();\n        }\n    }\n};\nexport { addContextMenuOptions as initializeContextMenu };\n","import { getIdFromUrl } from '../../utils/linkify';\nconst itemContainer = document.querySelector('#item-container');\nconst parseCreatorId = () => {\n    const creatorId = Number(itemContainer?.getAttribute('data-expected-seller-id'));\n    if (creatorId) {\n        return creatorId;\n    }\n    const creatorUrl = document\n        .querySelector('.item-name-container a.text-name')\n        ?.getAttribute('href');\n    if (creatorUrl) {\n        return getIdFromUrl(new URL(creatorUrl));\n    }\n    return NaN;\n};\nconst creatorId = parseCreatorId();\nconst assetId = Number(itemContainer?.getAttribute('data-item-id'));\nconst assetType = Number(itemContainer?.getAttribute('data-asset-type-id'));\n// These elements aren't guaranteed to be on the page when it loads.\nconst isOwnedAvatarAsset = () => {\n    if (document.querySelector('#edit-avatar-button')) {\n        // option to edit avatar, we definitely own this one\n        return true;\n    }\n    if (document.querySelectorAll('#item-details-limited-inventory-container .resale-button').length > 0) {\n        // it's a limited, and we own a copy\n        // and all limiteds are avatar assets\n        return true;\n    }\n    // nope.\n    return false;\n};\nconst isOwnCreatedItem = !!document.querySelector('#configure-item');\nconst isOwnedStudioItem = !!document.querySelector('#try-in-studio-button');\nconst isLimited = !!document.querySelector('asset-resale-pane');\nexport { assetId, assetType, creatorId, isOwnCreatedItem, isOwnedAvatarAsset, isOwnedStudioItem, isLimited, };\n","import AssetType from '../../enums/assetType';\nimport { getAssetContentsUrl } from '../../services/assets';\nimport { getTranslationResource } from '../../services/localization';\nimport { assetId, assetType, creatorId } from './details';\nconst createDownloadLink = async () => {\n    const downloadUrl = await getAssetContentsUrl(assetId);\n    if (!downloadUrl) {\n        return;\n    }\n    const downloadText = await getTranslationResource('Feature.UserAds', 'Action.Download');\n    const downloadLink = document.createElement('a');\n    downloadLink.setAttribute('href', downloadUrl.href);\n    downloadLink.download = 'download';\n    downloadLink.innerText = downloadText;\n    return downloadLink;\n};\nif (creatorId === 1) {\n    switch (assetType) {\n        case AssetType.Image:\n        case AssetType.Mesh:\n            const actionButton = document.querySelector('.price-container .action-button>button');\n            if (\n            // if we found the button\n            !(actionButton instanceof HTMLButtonElement) ||\n                // and the button is currently disabled\n                !actionButton.disabled) {\n                break;\n            }\n            // then we can replace it with the download button\n            createDownloadLink()\n                .then((downloadLink) => {\n                if (!downloadLink) {\n                    return;\n                }\n                actionButton.classList.remove('btn-growth-lg');\n                actionButton.classList.add('btn-control-lg');\n                actionButton.innerText = '';\n                actionButton.appendChild(downloadLink);\n                actionButton.disabled = false;\n            })\n                .catch((err) => {\n                console.error('Failed to create download link', err);\n            });\n            break;\n    }\n}\nexport { createDownloadLink };\n","const getItemTypeStat = () => {\n    // Game pass details page has this format.\n    const itemTypeStat = document.querySelector('.item-details .item-type-field-container');\n    if (itemTypeStat instanceof HTMLElement) {\n        return [\n            itemTypeStat,\n            'clearfix item-field-container',\n            'text-subheader text-label text-overflow field-label',\n            'field-content',\n        ];\n    }\n    // Item details page has this format sometimes.\n    const itemTypeSpan = document.querySelectorAll('#type-content');\n    if (itemTypeSpan.length > 0 &&\n        itemTypeSpan[itemTypeSpan.length - 1] instanceof HTMLElement) {\n        return [\n            itemTypeSpan[itemTypeSpan.length - 1].parentElement,\n            'clearfix item-info-row-container',\n            'font-header-1 text-subheader text-label text-overflow row-label',\n            'font-body text',\n        ];\n    }\n    return [null, '', '', ''];\n};\nconst createStat = (label, value) => {\n    const [itemTypeStat, containerClassName, labelClassName, valueClassName] = getItemTypeStat();\n    if (!itemTypeStat) {\n        return;\n    }\n    const container = document.createElement('div');\n    container.setAttribute('class', containerClassName);\n    const labelElement = document.createElement('div');\n    labelElement.setAttribute('class', labelClassName);\n    labelElement.innerText = label;\n    const valueElement = document.createElement('span');\n    valueElement.setAttribute('class', valueClassName);\n    valueElement.innerText = value;\n    container.appendChild(labelElement);\n    container.appendChild(valueElement);\n    itemTypeStat.after(container);\n};\nexport { createStat };\n","import { Batch } from '@tix-factory/batch';\nimport ExpirableDictionary from '../../utils/expireableDictionary';\nimport xsrfFetch from '../../utils/xsrfFetch';\nimport { manifest } from '../../constants';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'assetsService.getAssetContentsUrl';\nclass AssetContentsBatchProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const requestHeaders = new Headers();\n        requestHeaders.append('Roblox-Place-Id', '258257446');\n        requestHeaders.append('Roblox-Browser-Asset-Request', manifest.name);\n        const response = await xsrfFetch(new URL(`https://assetdelivery.roblox.com/v2/assets/batch`), {\n            method: 'POST',\n            headers: requestHeaders,\n            body: JSON.stringify(items.map((batchItem) => {\n                return {\n                    assetId: batchItem.value,\n                    requestId: batchItem.key,\n                };\n            })),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to load asset contents URL');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const asset = result.find((a) => a.requestId === item.key);\n            const location = asset?.locations[0];\n            if (location?.location) {\n                item.resolve(location.location);\n            }\n            else {\n                item.resolve('');\n            }\n        });\n    }\n    getKey(item) {\n        return item.toString();\n    }\n}\nconst assetContentsProcessor = new AssetContentsBatchProcessor();\nconst assetContentsCache = new ExpirableDictionary(messageDestination, 10 * 60 * 1000);\n// Fetches the date when a badge was awarded to the specified user.\nconst getAssetContentsUrl = async (assetId) => {\n    const url = await sendMessage(messageDestination, {\n        assetId,\n    });\n    return url ? new URL(url) : undefined;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return assetContentsCache.getOrAdd(assetContentsProcessor.getKey(message.assetId), () => {\n        // Queue up the fetch request, when not in the cache\n        return assetContentsProcessor.enqueue(message.assetId);\n    });\n});\nexport default getAssetContentsUrl;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'assetsService.getAssetSalesCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst getAssetSalesCount = async (assetId) => {\n    return sendMessage(messageDestination, { assetId });\n};\nconst loadAssetSalesCount = async (assetId) => {\n    const response = await fetch(`https://economy.roblox.com/v2/assets/${assetId}/details`);\n    if (!response.ok) {\n        throw new Error('Failed to load asset product info');\n    }\n    const result = await response.json();\n    return result.Sales || NaN;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.assetId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadAssetSalesCount(message.assetId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getAssetSalesCount;\n","import getAssetContentsUrl from './get-asset-contents-url';\nimport getAssetSalesCount from './get-asset-sales-count';\nglobalThis.assetsService = { getAssetContentsUrl, getAssetSalesCount };\nexport { getAssetContentsUrl, getAssetSalesCount };\n","import { addListener, sendMessage } from '../message';\nconst messageDestination = 'avatarService.getAvatarRules';\nlet avatarAssetRules = [];\nconst getAvatarAssetRules = async () => {\n    return sendMessage(messageDestination, {});\n};\nconst loadAvatarAssetRules = async () => {\n    const response = await fetch(`https://avatar.roblox.com/v1/avatar-rules`);\n    if (!response.ok) {\n        throw new Error(`Failed to load avatar rules (${response.status})`);\n    }\n    const result = await response.json();\n    return result.wearableAssetTypes.map((rule) => {\n        return {\n            maxNumber: rule.maxNumber,\n            assetType: rule.id,\n        };\n    });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, async () => {\n    if (avatarAssetRules.length > 0) {\n        return avatarAssetRules;\n    }\n    avatarAssetRules = await loadAvatarAssetRules();\n    return avatarAssetRules;\n}, {\n    levelOfParallelism: 1,\n});\nexport default getAvatarAssetRules;\n","import AssetType from '../../enums/assetType';\nimport xsrfFetch from '../../utils/xsrfFetch';\nimport getAvatarAssetRules from './get-avatar-asset-rules';\nconst getAvatarAssets = async (userId) => {\n    const response = await fetch(`https://avatar.roblox.com/v1/users/${userId}/avatar`);\n    if (!response.ok) {\n        throw new Error(`Failed to load avatar (${response.status})`);\n    }\n    const result = await response.json();\n    const assets = result.assets.map((asset) => {\n        return {\n            id: asset.id,\n            name: asset.name,\n            assetType: asset.assetType.id,\n        };\n    });\n    result.emotes.forEach((emote) => {\n        assets.push({\n            id: emote.assetId,\n            name: emote.assetName,\n            assetType: AssetType.Emote,\n        });\n    });\n    return assets;\n};\nconst wearItem = async (assetId, authenticatedUserId) => {\n    // Use set-wearing-assets instead of wear because it will allow more than the limit\n    const currentAssets = await getAvatarAssets(authenticatedUserId);\n    const response = await xsrfFetch(new URL(`https://avatar.roblox.com/v1/avatar/set-wearing-assets`), {\n        method: 'POST',\n        body: JSON.stringify({\n            assetIds: [assetId].concat(currentAssets\n                .filter((a) => a.assetType !== AssetType.Emote)\n                .map((a) => a.id)),\n        }),\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to wear asset (${assetId})`);\n    }\n    const result = await response.json();\n    if (result.invalidAssetIds.length > 0) {\n        throw new Error(`Failed to wear assets (${result.invalidAssetIds.join(', ')})`);\n    }\n};\nconst removeItem = async (assetId) => {\n    const response = await xsrfFetch(new URL(`https://avatar.roblox.com/v1/avatar/assets/${assetId}/remove`), {\n        method: 'POST',\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to remove asset (${assetId})`);\n    }\n};\nglobalThis.avatarService = { getAvatarAssetRules, getAvatarAssets, wearItem, removeItem };\nexport { getAvatarAssetRules, getAvatarAssets, wearItem, removeItem };\n","import { addListener, sendMessage } from '../message';\nconst englishLocale = 'en_us';\nconst messageDestination = 'localizationService.getTranslationResources';\nlet translationResourceCache = [];\nlet localeCache = '';\n// Gets the locale for the authenticated user.\nconst getAuthenticatedUserLocale = async () => {\n    if (localeCache) {\n        return localeCache;\n    }\n    try {\n        const response = await fetch(`https://locale.roblox.com/v1/locales/user-locale`);\n        if (!response.ok) {\n            console.warn('Failed to fetch user locale - defaulting to English.', response.status);\n            return (localeCache = englishLocale);\n        }\n        const result = await response.json();\n        return (localeCache = result.supportedLocale.locale);\n    }\n    catch (e) {\n        console.warn('Unhandled error loading user locale - defaulting to English.', e);\n        return (localeCache = englishLocale);\n    }\n};\n// Fetches all the translation resources for the authenticated user.\nconst getTranslationResources = async () => {\n    if (translationResourceCache.length > 0) {\n        return translationResourceCache;\n    }\n    return (translationResourceCache = await sendMessage(messageDestination, {}));\n};\n// Fetches an individual translation resource.\nconst getTranslationResource = async (namespace, key) => {\n    const translationResources = await getTranslationResources();\n    const resource = translationResources.find((r) => r.namespace === namespace && r.key === key);\n    if (!resource) {\n        console.warn(`No translation resource available.\\n\\tNamespace: ${namespace}\\n\\tKey: ${key}`);\n    }\n    return resource?.value || '';\n};\n// Listener to ensure these always happen in the background, for strongest caching potential.\naddListener(messageDestination, async () => {\n    if (translationResourceCache.length > 0) {\n        return translationResourceCache;\n    }\n    const locale = await getAuthenticatedUserLocale();\n    const response = await fetch(`https://translations.roblox.com/v1/translations?consumerType=Web`);\n    if (!response.ok) {\n        throw new Error(`Failed to load translation resources (${response.status})`);\n    }\n    const result = await response.json();\n    const resourcesUrl = result.data.find((r) => r.locale === locale) ||\n        result.data.find((r) => r.locale === englishLocale);\n    if (!resourcesUrl) {\n        throw new Error(`Failed to find translation resources for locale (${locale})`);\n    }\n    const resources = await fetch(resourcesUrl.url);\n    const resourcesJson = await resources.json();\n    return (translationResourceCache = resourcesJson.contents.map((r) => {\n        return {\n            namespace: r.namespace,\n            key: r.key,\n            value: r.translation || r.english,\n        };\n    }));\n}, {\n    // Ensure that multiple requests for this information can't be processed at once.\n    levelOfParallelism: 1,\n});\nglobalThis.localizationService = { getTranslationResource };\nexport { getTranslationResource };\n","import { isBackgroundPage } from '../../constants';\n// All the listeners, set in the background page.\nconst listeners = {};\n// All the tabs actively connected to the message service.\nconst tabs = {};\n// An identifier that tells us which version of the messaging service we're using,\n// to ensure we don't try to process a message not intended for us.\nconst version = 2.5;\n// Send a message to a destination, and get back the result.\nconst sendMessage = async (destination, message) => {\n    return new Promise(async (resolve, reject) => {\n        const serializedMessage = JSON.stringify(message);\n        if (isBackgroundPage) {\n            // Message is from the background page, to the background page.\n            try {\n                if (listeners[destination]) {\n                    const message = JSON.parse(serializedMessage);\n                    const result = await listeners[destination](message);\n                    console.debug(`Local listener response for '${destination}':`, result, message);\n                    const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                    if (result.success) {\n                        resolve(data);\n                    }\n                    else {\n                        reject(data);\n                    }\n                }\n                else {\n                    reject(`No message listener: ${destination}`);\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        }\n        else {\n            const outboundMessage = JSON.stringify({\n                version,\n                destination,\n                message: serializedMessage,\n            });\n            console.debug(`Sending message to '${destination}'`, serializedMessage);\n            chrome.runtime.sendMessage(outboundMessage, (result) => {\n                if (result === undefined) {\n                    reject(`Unexpected message result (undefined), suggests no listener in background page.\\n\\tDestination: ${destination}`);\n                    return;\n                }\n                const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                if (result.success) {\n                    resolve(data);\n                }\n                else {\n                    reject(data);\n                }\n            });\n        }\n    });\n};\n// Fetches a tab that we can send a message to, for work processing.\nconst getWorkerTab = () => {\n    const keys = Object.keys(tabs);\n    return keys.length > 0 ? tabs[keys[0]] : undefined;\n};\n// Sends a message to a tab.\nconst sendMessageToTab = async (destination, message, tab) => {\n    const serializedMessage = JSON.stringify(message);\n    const outboundMessage = JSON.stringify({\n        version,\n        destination,\n        message: serializedMessage,\n    });\n    console.debug(`Sending message to '${destination}' in tab`, serializedMessage, tab);\n    tab.postMessage(outboundMessage);\n};\n// Listen for messages at a specific destination.\nconst addListener = (destination, listener, options = {\n    levelOfParallelism: -1,\n}) => {\n    if (listeners[destination]) {\n        throw new Error(`${destination} already has message listener attached`);\n    }\n    const processMessage = async (message) => {\n        try {\n            console.debug(`Processing message for '${destination}'`, message);\n            const result = await listener(message);\n            const response = {\n                success: true,\n                data: JSON.stringify(result),\n            };\n            console.debug(`Successful message result from '${destination}':`, response, message);\n            return response;\n        }\n        catch (err) {\n            const response = {\n                success: false,\n                data: JSON.stringify(err),\n            };\n            console.debug(`Failed message result from '${destination}':`, response, message, err);\n            return response;\n        }\n    };\n    listeners[destination] = (message) => {\n        if (options.levelOfParallelism !== 1) {\n            return processMessage(message);\n        }\n        return new Promise((resolve, reject) => {\n            // https://stackoverflow.com/a/73482349/1663648\n            navigator.locks\n                .request(`messageService:${destination}`, async () => {\n                try {\n                    const result = await processMessage(message);\n                    resolve(result);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    };\n};\n// If we're currently in the background page, listen for messages.\nif (isBackgroundPage) {\n    chrome.runtime.onMessage.addListener((rawMessage, sender, sendResponse) => {\n        if (typeof rawMessage !== 'string') {\n            // Not for us.\n            return;\n        }\n        const fullMessage = JSON.parse(rawMessage);\n        if (fullMessage.version !== version ||\n            !fullMessage.destination ||\n            !fullMessage.message) {\n            // Not for us.\n            return;\n        }\n        const listener = listeners[fullMessage.destination];\n        if (!listener) {\n            sendResponse({\n                success: false,\n                data: JSON.stringify(`Could not route message to destination: ${fullMessage.destination}`),\n            });\n            return;\n        }\n        const message = JSON.parse(fullMessage.message);\n        listener(message)\n            .then(sendResponse)\n            .catch((err) => {\n            console.error('Listener is never expected to throw.', err, rawMessage, fullMessage);\n            sendResponse({\n                success: false,\n                data: JSON.stringify('Listener threw unhandled exception (see background page for error).'),\n            });\n        });\n        // Required for asynchronous callbacks\n        // https://stackoverflow.com/a/20077854/1663648\n        return true;\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n        const id = crypto.randomUUID();\n        console.debug('Tab connected', id, port);\n        tabs[id] = port;\n        port.onDisconnect.addListener(() => {\n            console.debug('Disconnecting tab', id, port);\n            delete tabs[id];\n        });\n    });\n}\nelse {\n    console.debug(`Not attaching listener for messages, because we're not in the background.`);\n    if (!window.messageServiceConnection) {\n        const port = (window.messageServiceConnection = chrome.runtime.connect(chrome.runtime.id, {\n            name: 'messageService',\n        }));\n        port.onMessage.addListener((rawMessage) => {\n            if (typeof rawMessage !== 'string') {\n                // Not for us.\n                return;\n            }\n            const fullMessage = JSON.parse(rawMessage);\n            if (fullMessage.version !== version ||\n                !fullMessage.destination ||\n                !fullMessage.message) {\n                // Not for us.\n                return;\n            }\n            const listener = listeners[fullMessage.destination];\n            if (!listener) {\n                // No listener in this tab for this message.\n                return;\n            }\n            // We don't really have a way to communicate the response back to the service worker.\n            // So we just... do nothing with it.\n            const message = JSON.parse(fullMessage.message);\n            listener(message).catch((err) => {\n                console.error('Unhandled error processing message in tab', fullMessage, err);\n            });\n        });\n    }\n}\nglobalThis.messageService = { sendMessage, addListener, getWorkerTab, sendMessageToTab };\nexport { sendMessage, addListener, getWorkerTab, sendMessageToTab };\n","import { sendMessage, addListener } from '../message';\n// Destination to be used with messaging.\nconst messageDestinationPrefix = 'settingsService';\n// Fetches a locally stored setting value by its key.\nconst getSettingValue = (key) => {\n    return sendMessage(`${messageDestinationPrefix}.getSettingValue`, {\n        key,\n    });\n};\n// Gets a boolean setting value, toggled to false by default.\nconst getToggleSettingValue = async (key) => {\n    const value = await getSettingValue(key);\n    return !!value;\n};\n// Locally stores a setting value.\nconst setSettingValue = (key, value) => {\n    return sendMessage(`${messageDestinationPrefix}.setSettingValue`, {\n        key,\n        value,\n    });\n};\nconst getValueFromLocalStorage = (key) => {\n    if (!localStorage.hasOwnProperty(key)) {\n        return undefined;\n    }\n    try {\n        const valueArray = JSON.parse(localStorage[key]);\n        if (Array.isArray(valueArray) && valueArray.length > 0) {\n            return valueArray[0];\n        }\n        console.warn(`Setting value in localStorage invalid: ${localStorage[key]} - removing it.`);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n    catch (err) {\n        console.warn(`Failed to parse '${key}' value from localStorage - removing it.`, err);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n};\naddListener(`${messageDestinationPrefix}.getSettingValue`, ({ key }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        const value = getValueFromLocalStorage(key);\n        if (value !== undefined) {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(value);\n            });\n        }\n        else {\n            chrome.storage.local.get(key, (values) => {\n                resolve(values[key]);\n            });\n        }\n    });\n});\naddListener(`${messageDestinationPrefix}.setSettingValue`, ({ key, value }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        if (value === undefined) {\n            chrome.storage.local.remove(key, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n        else {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n    });\n});\nglobalThis.settingsService = { getSettingValue, getToggleSettingValue, setSettingValue };\nexport { getSettingValue, getToggleSettingValue, setSettingValue };\n","// Fetches the user who is currently authenticated on the loaded web page.\nconst parseAuthenticatedUser = () => {\n    const userData = globalThis.document && document.querySelector(`meta[name='user-data']`);\n    // The user who is currently authenticated on the loaded web page.\n    return userData\n        ? {\n            id: Number(userData.getAttribute('data-userid')),\n            name: userData.getAttribute('data-name') || '',\n            displayName: userData.getAttribute('data-displayname') || '',\n        }\n        : null;\n};\nconst authenticatedUser = parseAuthenticatedUser();\nexport default authenticatedUser;\n// TODO: Deprecate after manifest V3 conversion.\nexport { parseAuthenticatedUser };\n","// This class can be used to concurrently cache items, or fetch their values.\nclass ExpirableDictionary {\n    lockKey;\n    expirationInMilliseconds;\n    // The items that are in the dictionary.\n    items = {};\n    constructor(\n    // A name for the dictionary, used for locking.\n    name, \n    // How long the item will remain in the dictionary, in milliseconds.\n    expirationInMilliseconds) {\n        this.lockKey = `ExpirableDictionary:${name}`;\n        this.expirationInMilliseconds = expirationInMilliseconds;\n    }\n    // Tries to fetch an item by its key from the dictionary, or it will call the value factory to add it in.\n    getOrAdd(key, valueFactory) {\n        const item = this.items[key];\n        if (item !== undefined) {\n            return Promise.resolve(item);\n        }\n        return new Promise((resolve, reject) => {\n            navigator.locks\n                .request(`${this.lockKey}:${key}`, async () => {\n                // It's possible the item was added since we requested the lock, check again.\n                const item = this.items[key];\n                if (item !== undefined) {\n                    resolve(item);\n                    return;\n                }\n                try {\n                    const value = (this.items[key] = await valueFactory());\n                    setTimeout(() => this.evict(key), this.expirationInMilliseconds);\n                    resolve(value);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    evict(key) {\n        delete this.items[key];\n    }\n}\nexport default ExpirableDictionary;\n","const getSEOLink = (id, name, path) => {\n    if (!name) {\n        name = 'redirect';\n    }\n    else {\n        name =\n            name\n                .replace(/'/g, '')\n                .replace(/\\W+/g, '-')\n                .replace(/^-+/, '')\n                .replace(/-+$/, '') || 'redirect';\n    }\n    return new URL(`https://www.roblox.com/${path}/${id}/${name}`);\n};\nconst getCatalogLink = (assetId, assetName) => {\n    return getSEOLink(assetId, assetName, 'catalog');\n};\nconst getLibraryLink = (assetId, assetName) => {\n    return getSEOLink(assetId, assetName, 'library');\n};\nconst getPlaceLink = (placeId, placeName) => {\n    return getSEOLink(placeId, placeName, 'games');\n};\nconst getUserProfileLink = (userId) => {\n    return getSEOLink(userId, 'profile', 'users');\n};\nconst getIdFromUrl = (url) => {\n    const match = url.pathname.match(/^\\/(badges|games|game-pass|groups|catalog|library|users)\\/(\\d+)\\//i) || [];\n    // Returns NaN if the URL doesn't match.\n    return Number(match[2]);\n};\nexport { getCatalogLink, getLibraryLink, getPlaceLink, getUserProfileLink, getIdFromUrl, };\n","export default (time) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, time);\n    });\n};\n","const headerName = 'X-CSRF-Token';\nlet xsrfToken = '';\n// A fetch request which will attach an X-CSRF-Token in all outbound requests.\nconst xsrfFetch = async (url, requestDetails) => {\n    if (url.hostname.endsWith('.roblox.com')) {\n        if (!requestDetails) {\n            requestDetails = {};\n        }\n        requestDetails.credentials = 'include';\n        if (!requestDetails.headers) {\n            requestDetails.headers = new Headers();\n        }\n        if (requestDetails.headers instanceof Headers) {\n            if (xsrfToken) {\n                requestDetails.headers.set(headerName, xsrfToken);\n            }\n            if (requestDetails.body && !requestDetails.headers.has('Content-Type')) {\n                requestDetails.headers.set('Content-Type', 'application/json');\n            }\n        }\n    }\n    const response = await fetch(url, requestDetails);\n    const token = response.headers.get(headerName);\n    if (response.ok || !token) {\n        return response;\n    }\n    xsrfToken = token;\n    return xsrfFetch(url, requestDetails);\n};\nexport default xsrfFetch;\n","import PromiseQueue from '../promise-queue';\nimport ErrorEvent from '../events/errorEvent';\nimport ItemErrorEvent from '../events/itemErrorEvent';\n// A class for batching and processing multiple single items into a single call.\nclass Batch extends EventTarget {\n    queueMap = {};\n    promiseMap = {};\n    limiter;\n    concurrencyHandler;\n    // All the batch items waiting to be processed.\n    queueArray = [];\n    // The configuration for this batch processor.\n    config;\n    constructor(configuration) {\n        super();\n        this.config = configuration;\n        this.limiter = new PromiseQueue({\n            levelOfParallelism: 1,\n            delayInMilliseconds: configuration.minimumDelay || 0,\n        });\n        this.concurrencyHandler = new PromiseQueue({\n            levelOfParallelism: configuration.levelOfParallelism || Infinity,\n        });\n    }\n    // Enqueues an item into a batch, to be processed.\n    enqueue(item) {\n        return new Promise((resolve, reject) => {\n            const key = this.getKey(item);\n            const promiseMap = this.promiseMap;\n            const queueArray = this.queueArray;\n            const queueMap = this.queueMap;\n            const retryCount = this.config.retryCount || 0;\n            const getRetryDelay = this.getRetryDelay.bind(this);\n            const dispatchEvent = this.dispatchEvent.bind(this);\n            const check = this.check.bind(this);\n            // Step 1: Ensure we have a way to resolve/reject the promise for this item.\n            const mergedPromise = promiseMap[key] || [];\n            if (mergedPromise.length < 0) {\n                this.promiseMap[key] = mergedPromise;\n            }\n            mergedPromise.push({ resolve, reject });\n            // Step 2: Check if we have the batched item created.\n            if (!queueMap[key]) {\n                const remove = (item) => {\n                    // Mark the item as completed, so we know we either resolved or rejected it.\n                    item.completed = true;\n                    for (let i = 0; i < queueArray.length; i++) {\n                        if (queueArray[i].key === key) {\n                            queueArray.splice(i, 1);\n                            break;\n                        }\n                    }\n                    delete promiseMap[key];\n                    delete queueMap[key];\n                };\n                const batchItem = {\n                    key,\n                    value: item,\n                    attempt: 0,\n                    retryAfter: 0,\n                    completed: false,\n                    resolve(result) {\n                        // We're not accepting any new items for this resolution.\n                        remove(this);\n                        // Defer the resolution until after the thread resolves.\n                        setTimeout(() => {\n                            // Process anyone who applied.\n                            while (mergedPromise.length > 0) {\n                                const promise = mergedPromise.shift();\n                                promise?.resolve(result);\n                            }\n                        }, 0);\n                    },\n                    reject(error) {\n                        // Defer the resolution until after the thread resolves.\n                        const retryDelay = this.attempt <= retryCount ? getRetryDelay(this) : undefined;\n                        const retryAfter = retryDelay !== undefined\n                            ? performance.now() + retryDelay\n                            : undefined;\n                        // Emit an event to notify that the item failed to process.\n                        dispatchEvent(new ItemErrorEvent(error, this, retryAfter));\n                        if (retryAfter !== undefined) {\n                            // The item can be retried, we haven't hit the maximum number of attempts yet.\n                            this.retryAfter = retryAfter;\n                            // Ensure the check runs after the retry delay.\n                            setTimeout(check, retryDelay);\n                        }\n                        else {\n                            // Remove the item, and reject anyone waiting on it.\n                            remove(this);\n                            // Defer the resolution until after the thread resolves.\n                            setTimeout(() => {\n                                // Process anyone who applied.\n                                while (mergedPromise.length > 0) {\n                                    const promise = mergedPromise.shift();\n                                    promise?.reject(error);\n                                }\n                            }, 0);\n                        }\n                    },\n                };\n                queueMap[key] = batchItem;\n                queueArray.push(batchItem);\n            }\n            // Attempt to process the queue on the next event loop.\n            setTimeout(check, this.config.enqueueDeferDelay);\n        });\n    }\n    // Batches together queued items, calls the process method.\n    // Will do nothing if the config requirements aren't met.\n    check() {\n        if (this.limiter.size > 0) {\n            // Already being checked.\n            return;\n        }\n        // We're using p-limit to ensure that multiple process calls can't be called at once.\n        this.limiter.enqueue(this._check.bind(this)).catch((err) => {\n            // This should be \"impossible\".. right?\n            this.dispatchEvent(new ErrorEvent(err));\n        });\n    }\n    // The actual implementation of the check method.\n    _check() {\n        const retry = this.check.bind(this);\n        // Get a batch of items to process.\n        const batch = this.getBatch();\n        // Nothing in the queue ready to be processed.\n        if (batch.length < 1) {\n            return Promise.resolve();\n        }\n        // Update the items that we're about to process, so they don't get double processed.\n        batch.forEach((item) => {\n            item.attempt += 1;\n            item.retryAfter = Infinity;\n        });\n        setTimeout(async () => {\n            try {\n                await this.concurrencyHandler.enqueue(this.process.bind(this, batch));\n            }\n            catch (err) {\n                this.dispatchEvent(new ErrorEvent(err));\n            }\n            finally {\n                batch.forEach((item) => {\n                    if (item.completed) {\n                        // Item completed its processing, nothing more to do.\n                        return;\n                    }\n                    else if (item.retryAfter > 0 && item.retryAfter !== Infinity) {\n                        // The item failed to process, but it is going to be retried.\n                        return;\n                    }\n                    else {\n                        // Item neither rejected, or completed its processing status.\n                        // This is a requirement, so we reject the item.\n                        item.reject(new Error('Item was not marked as resolved or rejected after batch processing completed.'));\n                    }\n                });\n                // Now that we've finished processing the batch, run the process again, just in case there's anything left.\n                setTimeout(retry, 0);\n            }\n        }, 0);\n        if (batch.length >= this.config.maxSize) {\n            // We have the maximum number of items in the batch, let's make sure we kick off the process call again.\n            setTimeout(retry, this.config.minimumDelay);\n        }\n        return Promise.resolve();\n    }\n    getBatch() {\n        const now = performance.now();\n        const batch = [];\n        for (let i = 0; i < this.queueArray.length; i++) {\n            const batchItem = this.queueArray[i];\n            if (batchItem.retryAfter > now) {\n                // Item is not ready to be retried, or it is currently being processed.\n                continue;\n            }\n            batch.push(batchItem);\n            if (batch.length >= this.config.maxSize) {\n                break;\n            }\n        }\n        return batch;\n    }\n    // Obtains a unique key to identify the item.\n    // This is used to deduplicate the batched items.\n    getKey(item) {\n        return item === undefined ? 'undefined' : JSON.stringify(item);\n    }\n    // Returns how long to wait before retrying the item.\n    getRetryDelay(item) {\n        return 0;\n    }\n    // Called when it is time to process a batch of items.\n    process(items) {\n        return Promise.reject(new Error('Inherit this class, and implement the processBatch method.'));\n    }\n}\nexport default Batch;\n","// An event class which can be used to emit an error.\nclass ErrorEvent extends Event {\n    // The error associated with the event.\n    error;\n    // Constructs the event from the error.\n    constructor(error) {\n        super('error');\n        this.error = error;\n    }\n}\nexport default ErrorEvent;\n","import ErrorEvent from './errorEvent';\n// An event class which can be used to emit an error event for an item that failed to process.\nclass ItemErrorEvent extends ErrorEvent {\n    // The item that failed to process.\n    batchItem;\n    // The amount of time when the item will be retried.\n    retryAfter;\n    // Constructs the event from the error.\n    constructor(error, batchItem, retryAfter) {\n        super(error);\n        this.batchItem = batchItem;\n        this.retryAfter = retryAfter;\n    }\n}\nexport default ItemErrorEvent;\n","// Export all the things from this module.\nexport { default as Batch } from './batch';\nexport { default as ErrorEvent } from './events/errorEvent';\nexport { default as ItemErrorEvent } from './events/itemErrorEvent';\nexport { default as PromiseQueue } from './promise-queue';\n","// A limiter for running promises in parallel.\n// Queue ensures order is maintained.\nclass PromiseQueue {\n    // All the promises that have been enqueued, and are waiting to be processed.\n    queue = [];\n    // The PromiseQueue configuration.\n    config;\n    // How many promises are actively being processed.\n    activeCount = 0;\n    // The next time a promise can be processed.\n    nextProcessTime = 0;\n    // Constructs a promise queue, defining the number of promises that may run in parallel.\n    constructor(config) {\n        this.config = config;\n    }\n    // The number of promises waiting to be processed.\n    get size() {\n        return this.queue.length;\n    }\n    // Puts a function that will create the promise to run on the queue, and returns a promise\n    // that will return the result of the enqueued promise.\n    enqueue(createPromise) {\n        return new Promise(async (resolve, reject) => {\n            this.queue.push({\n                deferredPromise: { resolve, reject },\n                createPromise,\n            });\n            await this.process();\n        });\n    }\n    async process() {\n        if (this.activeCount >= this.config.levelOfParallelism) {\n            // Already running max number of promises in parallel.\n            return;\n        }\n        const reprocess = this.process.bind(this);\n        const delayInMilliseconds = this.config.delayInMilliseconds;\n        if (delayInMilliseconds !== undefined && delayInMilliseconds > 0) {\n            const now = performance.now();\n            const remainingTime = this.nextProcessTime - now;\n            if (remainingTime > 0) {\n                // We're not allowed to process the next promise yet.\n                setTimeout(reprocess, remainingTime);\n                return;\n            }\n            this.nextProcessTime = now + delayInMilliseconds;\n        }\n        const promise = this.queue.shift();\n        if (!promise) {\n            // No promise to process.\n            return;\n        }\n        this.activeCount++;\n        try {\n            const result = await promise.createPromise();\n            promise.deferredPromise.resolve(result);\n        }\n        catch (err) {\n            promise.deferredPromise.reject(err);\n        }\n        finally {\n            // Ensure we subtract from how many promises are active\n            this.activeCount--;\n            // And then run the process function again, in case there are any promises left to run.\n            setTimeout(reprocess, 0);\n        }\n    }\n}\nexport default PromiseQueue;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import '../../../css/pages/item-details.scss';\nimport { getAssetSalesCount } from '../../services/assets';\nimport { getTranslationResource } from '../../services/localization';\nimport { getToggleSettingValue } from '../../services/settings';\nimport wait from '../../utils/wait';\nimport { assetId, isLimited, isOwnCreatedItem } from './details';\nimport { createStat } from './stats';\nimport calculateRecentAveragePriceAfterSale from './calculate-rap-after-sale';\nimport { initializeContextMenu } from './context-menu';\n// Add sales counter onto the page.\nif (isOwnCreatedItem && !isLimited) {\n    getToggleSettingValue('itemSalesCounter')\n        .then(async (enabled) => {\n        if (!enabled) {\n            return;\n        }\n        while (!document.getElementById('item-details')) {\n            // Wait until the item details container is loaded.\n            await wait(250);\n        }\n        getAssetSalesCount(assetId)\n            .then(async (saleCount) => {\n            if (isNaN(saleCount)) {\n                return;\n            }\n            try {\n                const salesLabel = await getTranslationResource('CreatorDashboard.Creations', 'Heading.Sales');\n                createStat(salesLabel, saleCount.toLocaleString());\n            }\n            catch (e) {\n                console.error('Failed to render sales label', e);\n            }\n        })\n            .catch((err) => {\n            console.error('Failed to fetch sale count', err);\n        });\n    })\n        .catch((err) => {\n        console.warn('Failed to check if sale counter setting was enabled.', err);\n    });\n}\n// Add features for limited items.\nif (isLimited) {\n    setInterval(() => {\n        const currentAveragePrice = Number(document\n            .getElementById('item-average-price')\n            ?.innerText?.replace(/\\D+/g, ''));\n        if (!currentAveragePrice) {\n            return;\n        }\n        document\n            .querySelectorAll('.reseller-price-container:not([rplus])')\n            .forEach((priceContainer) => {\n            if (!(priceContainer instanceof HTMLElement)) {\n                return;\n            }\n            priceContainer.setAttribute('rplus', `${+new Date()}`);\n            const price = Number(priceContainer.innerText.replace(/\\D+/g, ''));\n            if (!price) {\n                return;\n            }\n            const rapAfterSale = calculateRecentAveragePriceAfterSale(currentAveragePrice, price);\n            priceContainer.setAttribute('title', `If this sells, the average price of the item should be approximately R\\$${rapAfterSale.toLocaleString()}`);\n        });\n    }, 1000);\n}\n// Listen for the context menu to open.\nwindow.addEventListener('DOMNodeInserted', async (event) => {\n    if (!(event.target instanceof HTMLElement)) {\n        return;\n    }\n    if (event.target.classList.contains('popover') &&\n        event.target.parentElement?.id === 'item-context-menu') {\n        const contextMenu = event.target.parentElement.querySelector('ul.dropdown-menu');\n        if (contextMenu instanceof HTMLElement) {\n            try {\n                await initializeContextMenu(contextMenu);\n            }\n            catch (e) {\n                console.warn('Unexpected error opening context menu', e);\n            }\n        }\n    }\n});\n"],"names":[],"sourceRoot":""}