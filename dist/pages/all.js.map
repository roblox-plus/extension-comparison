{"version":3,"file":"./pages/all.js","mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;ACDA;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AChhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACznCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzxlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACftMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://roblox-plus/./node_modules/db.js/dist/db.min.js","webpack://roblox-plus/./src/css/pages/all.scss","webpack://roblox-plus/./src/js/constants/index.ts","webpack://roblox-plus/./src/js/enums/presenceType.ts","webpack://roblox-plus/./src/js/pages/all/navigation/bubble.ts","webpack://roblox-plus/./src/js/pages/all/navigation/index.ts","webpack://roblox-plus/./src/js/pages/all/navigation/links.ts","webpack://roblox-plus/./src/js/pages/all/navigation/robux.ts","webpack://roblox-plus/./src/js/pages/all/navigation/utils.ts","webpack://roblox-plus/./src/js/services/currency/getRobuxBalance.ts","webpack://roblox-plus/./src/js/services/currency/history.ts","webpack://roblox-plus/./src/js/services/currency/index.ts","webpack://roblox-plus/./src/js/services/friends/getFriendRequestCount.ts","webpack://roblox-plus/./src/js/services/friends/getUserFriends.ts","webpack://roblox-plus/./src/js/services/friends/index.ts","webpack://roblox-plus/./src/js/services/game-launch/buildProtocolUrl.ts","webpack://roblox-plus/./src/js/services/game-launch/index.ts","webpack://roblox-plus/./src/js/services/message/index.ts","webpack://roblox-plus/./src/js/services/presence/batchProcessor.ts","webpack://roblox-plus/./src/js/services/presence/index.ts","webpack://roblox-plus/./src/js/services/private-messages/getUnreadMessageCount.ts","webpack://roblox-plus/./src/js/services/private-messages/index.ts","webpack://roblox-plus/./src/js/services/settings/index.ts","webpack://roblox-plus/./src/js/services/trades/getTradeCount.ts","webpack://roblox-plus/./src/js/services/trades/index.ts","webpack://roblox-plus/./src/js/utils/abbreviateNumber.ts","webpack://roblox-plus/./src/js/utils/authenticatedUser.ts","webpack://roblox-plus/./src/js/utils/expireableDictionary.ts","webpack://roblox-plus/./src/js/utils/launchProtocolUrl.ts","webpack://roblox-plus/./src/js/utils/wait.ts","webpack://roblox-plus/./src/js/utils/xsrfFetch.ts","webpack://roblox-plus/./node_modules/twemoji/dist/twemoji.esm.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/batch/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/errorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/events/itemErrorEvent.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/index.js","webpack://roblox-plus/./node_modules/@tix-factory/batch/dist/promise-queue/index.js","webpack://roblox-plus/webpack/bootstrap","webpack://roblox-plus/webpack/runtime/compat get default export","webpack://roblox-plus/webpack/runtime/define property getters","webpack://roblox-plus/webpack/runtime/hasOwnProperty shorthand","webpack://roblox-plus/webpack/runtime/make namespace object","webpack://roblox-plus/./src/js/pages/all/index.ts"],"sourcesContent":["!function(a){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=a();else if(\"function\"==typeof define&&define.amd)define([],a);else{var b;b=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,b.db=a()}}(function(){var a;return function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i=\"function\"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);var j=new Error(\"Cannot find module '\"+g+\"'\");throw j.code=\"MODULE_NOT_FOUND\",j}var k=c[g]={exports:{}};a[g][0].call(k.exports,function(b){var c=a[g][1][b];return e(c?c:b)},k,k.exports,b,a,c,d)}return c[g].exports}for(var f=\"function\"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(b,c,d){\"use strict\";function e(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}var f=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{!d&&h[\"return\"]&&h[\"return\"]()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}}(),g=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol?\"symbol\":typeof a};!function(b){function d(a){return a&&\"object\"===(\"undefined\"==typeof a?\"undefined\":g(a))}function h(a){var b=Object.keys(a).sort();if(1===b.length){var c=b[0],d=a[c],e=void 0,f=void 0;switch(c){case\"eq\":e=\"only\";break;case\"gt\":e=\"lowerBound\",f=!0;break;case\"lt\":e=\"upperBound\",f=!0;break;case\"gte\":e=\"lowerBound\";break;case\"lte\":e=\"upperBound\";break;default:throw new TypeError(\"`\"+c+\"` is not a valid key\")}return[e,[d,f]]}var g=a[b[0]],h=a[b[1]],i=b.join(\"-\");switch(i){case\"gt-lt\":case\"gt-lte\":case\"gte-lt\":case\"gte-lte\":return[\"bound\",[g,h,\"gt\"===b[0],\"lt\"===b[1]]];default:throw new TypeError(\"`\"+i+\"` are conflicted keys\")}}function i(a){if(a&&\"object\"===(\"undefined\"==typeof a?\"undefined\":g(a))&&!(a instanceof j)){var b=h(a),c=f(b,2),d=c[0],i=c[1];return j[d].apply(j,e(i))}return a}var j=b.IDBKeyRange||b.webkitIDBKeyRange,k={readonly:\"readonly\",readwrite:\"readwrite\"},l=Object.prototype.hasOwnProperty,m=function(a){return a},n=b.indexedDB||b.webkitIndexedDB||b.mozIndexedDB||b.oIndexedDB||b.msIndexedDB||b.shimIndexedDB||function(){throw new Error(\"IndexedDB required\")}(),o={},p=[\"abort\",\"error\",\"versionchange\"],q=function(a,b,c,d){var f=this,i=null,l=function(d,f,h,l,m,n,o){return new Promise(function(p,q){var r=void 0;try{r=d?j[d].apply(j,e(f)):null}catch(s){return void q(s)}n=n||[],m=m||null;var t=[],u=0,v=[r],w=b.transaction(a,i?k.readwrite:k.readonly);w.onerror=function(a){return q(a)},w.onabort=function(a){return q(a)},w.oncomplete=function(){return p(t)};var x=w.objectStore(a),y=\"string\"==typeof c?x.index(c):x;\"count\"!==h&&v.push(l||\"next\");var z=i?Object.keys(i):[],A=function(a){return z.forEach(function(b){var c=i[b];\"function\"==typeof c&&(c=c(a)),a[b]=c}),a};y[h].apply(y,v).onsuccess=function(a){var b=a.target.result;if(\"number\"==typeof b)t=b;else if(b)if(null!==m&&m[0]>u)u=m[0],b.advance(m[0]);else if(null!==m&&u>=m[0]+m[1]);else{var c=function(){var a=!0,c=\"value\"in b?b.value:b.key;try{n.forEach(function(b){a=\"function\"==typeof b[0]?a&&b[0](c):a&&c[b[0]]===b[1]})}catch(d){return q(d),{v:void 0}}if(a){if(u++,i)try{c=A(c),b.update(c)}catch(d){return q(d),{v:void 0}}try{t.push(o(c))}catch(d){return q(d),{v:void 0}}}b[\"continue\"]()}();if(\"object\"===(\"undefined\"==typeof c?\"undefined\":g(c)))return c.v}}})},n=function(a,b,c){var e=[],f=\"next\",h=\"openCursor\",j=null,k=m,n=!1,o=d||c,p=function(){return o?Promise.reject(o):l(a,b,h,n?f+\"unique\":f,j,e,k)},q=function(){return f=null,h=\"count\",{execute:p}},r=function(){return h=\"openKeyCursor\",{desc:u,distinct:v,execute:p,filter:t,limit:s,map:x}},s=function(a,b){return j=b?[a,b]:[0,a],o=j.some(function(a){return\"number\"!=typeof a})?new Error(\"limit() arguments must be numeric\"):o,{desc:u,distinct:v,filter:t,keys:r,execute:p,map:x,modify:w}},t=function y(a,b){return e.push([a,b]),{desc:u,distinct:v,execute:p,filter:y,keys:r,limit:s,map:x,modify:w}},u=function(){return f=\"prev\",{distinct:v,execute:p,filter:t,keys:r,limit:s,map:x,modify:w}},v=function(){return n=!0,{count:q,desc:u,execute:p,filter:t,keys:r,limit:s,map:x,modify:w}},w=function(a){return i=a&&\"object\"===(\"undefined\"==typeof a?\"undefined\":g(a))?a:null,{execute:p}},x=function(a){return k=a,{count:q,desc:u,distinct:v,execute:p,filter:t,keys:r,limit:s,modify:w}};return{count:q,desc:u,distinct:v,execute:p,filter:t,keys:r,limit:s,map:x,modify:w}};[\"only\",\"bound\",\"upperBound\",\"lowerBound\"].forEach(function(a){f[a]=function(){return n(a,arguments)}}),this.range=function(a){var b=void 0,c=[null,null];try{c=h(a)}catch(d){b=d}return n.apply(void 0,e(c).concat([b]))},this.filter=function(){var a=n(null,null);return a.filter.apply(a,arguments)},this.all=function(){return this.filter()}},r=function(a,b,c,e){var f=this,g=!1;if(this.getIndexedDB=function(){return a},this.isClosed=function(){return g},this.query=function(b,c){var d=g?new Error(\"Database has been closed\"):null;return new q(b,a,c,d)},this.add=function(b){for(var c=arguments.length,e=Array(c>1?c-1:0),f=1;c>f;f++)e[f-1]=arguments[f];return new Promise(function(c,f){if(g)return void f(new Error(\"Database has been closed\"));var h=e.reduce(function(a,b){return a.concat(b)},[]),j=a.transaction(b,k.readwrite);j.onerror=function(a){a.preventDefault(),f(a)},j.onabort=function(a){return f(a)},j.oncomplete=function(){return c(h)};var m=j.objectStore(b);h.some(function(a){var b=void 0,c=void 0;if(d(a)&&l.call(a,\"item\")&&(c=a.key,a=a.item,null!=c))try{c=i(c)}catch(e){return f(e),!0}try{b=null!=c?m.add(a,c):m.add(a)}catch(e){return f(e),!0}b.onsuccess=function(b){if(d(a)){var c=b.target,e=c.source.keyPath;null===e&&(e=\"__id__\"),l.call(a,e)||Object.defineProperty(a,e,{value:c.result,enumerable:!0})}}})})},this.update=function(b){for(var c=arguments.length,e=Array(c>1?c-1:0),f=1;c>f;f++)e[f-1]=arguments[f];return new Promise(function(c,f){if(g)return void f(new Error(\"Database has been closed\"));var h=e.reduce(function(a,b){return a.concat(b)},[]),j=a.transaction(b,k.readwrite);j.onerror=function(a){a.preventDefault(),f(a)},j.onabort=function(a){return f(a)},j.oncomplete=function(){return c(h)};var m=j.objectStore(b);h.some(function(a){var b=void 0,c=void 0;if(d(a)&&l.call(a,\"item\")&&(c=a.key,a=a.item,null!=c))try{c=i(c)}catch(e){return f(e),!0}try{b=null!=c?m.put(a,c):m.put(a)}catch(g){return f(g),!0}b.onsuccess=function(b){if(d(a)){var c=b.target,e=c.source.keyPath;null===e&&(e=\"__id__\"),l.call(a,e)||Object.defineProperty(a,e,{value:c.result,enumerable:!0})}}})})},this.put=function(){return this.update.apply(this,arguments)},this.remove=function(b,c){return new Promise(function(d,e){if(g)return void e(new Error(\"Database has been closed\"));try{c=i(c)}catch(f){return void e(f)}var h=a.transaction(b,k.readwrite);h.onerror=function(a){a.preventDefault(),e(a)},h.onabort=function(a){return e(a)},h.oncomplete=function(){return d(c)};var j=h.objectStore(b);try{j[\"delete\"](c)}catch(l){e(l)}})},this[\"delete\"]=function(){return this.remove.apply(this,arguments)},this.clear=function(b){return new Promise(function(c,d){if(g)return void d(new Error(\"Database has been closed\"));var e=a.transaction(b,k.readwrite);e.onerror=function(a){return d(a)},e.onabort=function(a){return d(a)},e.oncomplete=function(){return c()};var f=e.objectStore(b);f.clear()})},this.close=function(){return new Promise(function(d,e){return g?void e(new Error(\"Database has been closed\")):(a.close(),g=!0,delete o[b][c],void d())})},this.get=function(b,c){return new Promise(function(d,e){if(g)return void e(new Error(\"Database has been closed\"));try{c=i(c)}catch(f){return void e(f)}var h=a.transaction(b);h.onerror=function(a){a.preventDefault(),e(a)},h.onabort=function(a){return e(a)};var j=h.objectStore(b),k=void 0;try{k=j.get(c)}catch(l){e(l)}k.onsuccess=function(a){return d(a.target.result)}})},this.count=function(b,c){return new Promise(function(d,e){if(g)return void e(new Error(\"Database has been closed\"));try{c=i(c)}catch(f){return void e(f)}var h=a.transaction(b);h.onerror=function(a){a.preventDefault(),e(a)},h.onabort=function(a){return e(a)};var j=h.objectStore(b),k=void 0;try{k=null==c?j.count():j.count(c)}catch(l){e(l)}k.onsuccess=function(a){return d(a.target.result)}})},this.addEventListener=function(b,c){if(!p.includes(b))throw new Error(\"Unrecognized event type \"+b);return\"error\"===b?void a.addEventListener(b,function(a){a.preventDefault(),c(a)}):void a.addEventListener(b,c)},this.removeEventListener=function(b,c){if(!p.includes(b))throw new Error(\"Unrecognized event type \"+b);a.removeEventListener(b,c)},p.forEach(function(a){this[a]=function(b){return this.addEventListener(a,b),this}},this),!e){var h=void 0;return[].some.call(a.objectStoreNames,function(a){if(f[a])return h=new Error('The store name, \"'+a+'\", which you have attempted to load, conflicts with db.js method names.\"'),f.close(),!0;f[a]={};var b=Object.keys(f);b.filter(function(a){return![].concat(p,[\"close\",\"addEventListener\",\"removeEventListener\"]).includes(a)}).map(function(b){return f[a][b]=function(){for(var c=arguments.length,d=Array(c),e=0;c>e;e++)d[e]=arguments[e];return f[b].apply(f,[a].concat(d))}})}),h}},s=function(a,b,c,d,e,f){if(c&&0!==c.length){for(var h=0;h<d.objectStoreNames.length;h++){var i=d.objectStoreNames[h];l.call(c,i)||d.deleteObjectStore(i)}var j=void 0;return Object.keys(c).some(function(a){var e=c[a],f=void 0;if(d.objectStoreNames.contains(a))f=b.transaction.objectStore(a);else try{f=d.createObjectStore(a,e.key)}catch(h){return j=h,!0}Object.keys(e.indexes||{}).some(function(a){try{f.index(a)}catch(b){var c=e.indexes[a];c=c&&\"object\"===(\"undefined\"==typeof c?\"undefined\":g(c))?c:{};try{f.createIndex(a,c.keyPath||c.key||a,c)}catch(d){return j=d,!0}}})}),j}},t=function(a,b,c,d){var e=a.target.result;o[b][c]=e;var f=new r(e,b,c,d);return f instanceof Error?Promise.reject(f):Promise.resolve(f)},u={version:\"0.15.0\",open:function(a){var b=a.server,c=a.version||1,d=a.schema,e=a.noServerMethods;return o[b]||(o[b]={}),new Promise(function(a,f){if(o[b][c])t({target:{result:o[b][c]}},b,c,e).then(a,f);else{var h=function(){if(\"function\"==typeof d)try{d=d()}catch(g){return f(g),{v:void 0}}var h=n.open(b,c);h.onsuccess=function(d){return t(d,b,c,e).then(a,f)},h.onerror=function(a){a.preventDefault(),f(a)},h.onupgradeneeded=function(a){var e=s(a,h,d,a.target.result,b,c);e&&f(e)},h.onblocked=function(a){var d=new Promise(function(a,d){h.onsuccess=function(f){t(f,b,c,e).then(a,d)},h.onerror=function(a){return d(a)}});a.resume=d,f(a)}}();if(\"object\"===(\"undefined\"==typeof h?\"undefined\":g(h)))return h.v}})},\"delete\":function(a){return new Promise(function(b,c){var d=n.deleteDatabase(a);d.onsuccess=function(a){return b(a)},d.onerror=function(a){return c(a)},d.onblocked=function(a){a=null===a.newVersion||\"undefined\"==typeof Proxy?a:new Proxy(a,{get:function(a,b){return\"newVersion\"===b?null:a[b]}});var b=new Promise(function(b,c){d.onsuccess=function(c){\"newVersion\"in c||(c.newVersion=a.newVersion),\"oldVersion\"in c||(c.oldVersion=a.oldVersion),b(c)},d.onerror=function(a){return c(a)}});a.resume=b,c(a)}})},cmp:function(a,b){return new Promise(function(c,d){try{c(n.cmp(a,b))}catch(e){d(e)}})}};\"undefined\"!=typeof c&&\"undefined\"!=typeof c.exports?c.exports=u:\"function\"==typeof a&&a.amd?a(function(){return u}):b.db=u}(self)},{}]},{},[1])(1)});\r\n//# sourceMappingURL=db.min.js.map","// extracted by mini-css-extract-plugin\nexport {};","const manifest = chrome.runtime.getManifest();\nconst isBackgroundPage = chrome.runtime.getURL(manifest.background?.page || '') === location.href;\nexport { manifest, isBackgroundPage };\n","// The types of user presence.\nvar PresenceType;\n(function (PresenceType) {\n    // The user is offline.\n    PresenceType[\"Offline\"] = \"Offline\";\n    // The user is online.\n    PresenceType[\"Online\"] = \"Online\";\n    // The user is currently in an experience.\n    PresenceType[\"Experience\"] = \"Experience\";\n    // The user is currently in Roblox Studio.\n    PresenceType[\"Studio\"] = \"Studio\";\n})(PresenceType || (PresenceType = {}));\nexport default PresenceType;\n","import abbreviateNumber from '../../../utils/abbreviateNumber';\nimport { getAbbreviateAtValue, parseNumber, setText } from './utils';\n// Gets or creates a bubble in the side navigation bar.\nconst getOrCreateBubble = (navigationBarItem, allowCreate) => {\n    const selector = `#${navigationBarItem} .notification-blue`;\n    let bubble = document.querySelector(selector);\n    if (bubble) {\n        // it's possible that Roblox could have created a bubble after we did\n        // validate that, and if they did, prefer theirs.\n        const allBubbles = document.querySelectorAll(selector);\n        if (allBubbles.length > 1) {\n            const ourBubble = document.querySelector(`#${navigationBarItem} div[rplus] .notification-blue`);\n            if (ourBubble) {\n                ourBubble.parentElement?.remove();\n            }\n            bubble = document.querySelector(selector);\n        }\n        if (bubble) {\n            return bubble;\n        }\n    }\n    if (allowCreate) {\n        const navigationItem = document.getElementById(navigationBarItem);\n        if (!navigationItem) {\n            return undefined;\n        }\n        let container = navigationItem?.querySelector('.dynamic-width-item.align-right');\n        if (!container) {\n            container = document.createElement('div');\n            container.setAttribute('class', 'dynamic-width-item align-right');\n            container.setAttribute('rplus', `${+new Date()}`);\n            navigationItem?.appendChild(container);\n        }\n        bubble = document.createElement('span');\n        bubble.setAttribute('class', 'notification-blue notification hidden');\n        bubble.setAttribute('title', '0');\n        bubble.setAttribute('count', '0');\n        bubble.innerHTML = '0';\n        container.appendChild(bubble);\n        return bubble;\n    }\n    return undefined;\n};\n// Gets the value from a navigation bar bubble.\nconst getBubbleValue = (navigationBarItem) => {\n    const bubble = getOrCreateBubble(navigationBarItem, false);\n    if (!bubble) {\n        return 0;\n    }\n    return parseNumber(bubble.getAttribute('title'));\n};\n// Attempts to set the value in a navigation bar bubble.\nconst setBubbleValue = async (navigationBarItem, value) => {\n    const bubble = getOrCreateBubble(navigationBarItem, true);\n    if (!bubble) {\n        // It's possible the navigation bar item doesn't exist yet.\n        return;\n    }\n    const abbreviatedAt = await getAbbreviateAtValue();\n    if (setText(bubble, abbreviateNumber(value, abbreviatedAt))) {\n        bubble.setAttribute('title', value.toLocaleString());\n        bubble.classList.toggle('hidden', value <= 0);\n    }\n};\nexport { getBubbleValue, setBubbleValue };\n","import { manifest } from '../../../constants';\nimport { getFriendRequestCount } from '../../../services/friends';\nimport { getUnreadMessageCount } from '../../../services/private-messages';\nimport { getToggleSettingValue } from '../../../services/settings';\nimport { getTradeCount } from '../../../services/trades';\nimport { parseAuthenticatedUser } from '../../../utils/authenticatedUser';\nimport { getBubbleValue, setBubbleValue } from './bubble';\nimport { getLinkOverrides, updateNavigationLink } from './links';\nimport { getRobux, setRobux } from './robux';\n// Check if we should be refreshing the counter values.\nconst refreshEnabled = async () => {\n    try {\n        return await getToggleSettingValue('navcounter');\n    }\n    catch (err) {\n        console.warn('Failed to check if live navigation counters are enabled', err);\n        return false;\n    }\n};\n// Fetches the count of friend requests\nconst getFriendRequestBubbleCount = async (refresh) => {\n    const authenticatedUser = parseAuthenticatedUser();\n    if (refresh && authenticatedUser) {\n        return await getFriendRequestCount(authenticatedUser.id);\n    }\n    return getBubbleValue('nav-friends');\n};\n// Fetches the count of unread private messages\nconst getPrivateMessageBubbleCount = async (refresh) => {\n    const authenticatedUser = parseAuthenticatedUser();\n    if (refresh && authenticatedUser) {\n        return await getUnreadMessageCount(authenticatedUser.id);\n    }\n    return getBubbleValue('nav-message');\n};\n// Fetches the count of inbound trades\nconst getTradeBubbleCount = async (refresh) => {\n    const authenticatedUser = parseAuthenticatedUser();\n    if (refresh && authenticatedUser) {\n        return await getTradeCount('inbound');\n    }\n    return getBubbleValue('nav-trade');\n};\n// Update the navigation bar, periodically.\nsetInterval(async () => {\n    const shouldRefresh = await refreshEnabled();\n    // Update the Robux count.\n    const robux = await getRobux(shouldRefresh);\n    setRobux(robux);\n    // Update the friend request count.\n    const friendRequests = await getFriendRequestBubbleCount(shouldRefresh);\n    setBubbleValue('nav-friends', friendRequests);\n    // Update the private message count.\n    const unreadPrivateMessages = await getPrivateMessageBubbleCount(shouldRefresh);\n    setBubbleValue('nav-message', unreadPrivateMessages);\n    // Update the trade count.\n    const trades = await getTradeBubbleCount(shouldRefresh);\n    setBubbleValue('nav-trade', trades);\n    // Update navigation links.\n    const links = await getLinkOverrides();\n    if (links.length === 2) {\n        // First element in the array is the third link in the navigation bar.\n        // Which is also the link that is second to last.\n        if (links[0].override) {\n            updateNavigationLink(-2, links[0].text, links[0].href);\n        }\n        // Second element in the array is the fourth link in the navigation bar.\n        // Which is also the link that is also the last link in the navigation bar.\n        if (links[1].override) {\n            updateNavigationLink(-1, links[1].text, links[1].href);\n        }\n    }\n    // Control panel link.\n    let controlPanelLink = document.querySelector('a#nav-rplus');\n    if (!controlPanelLink && manifest.homepage_url) {\n        const upgradeButton = document.querySelector('li.rbx-upgrade-now');\n        if (!upgradeButton) {\n            // Couldn't find the element we use to prepend before... :coffin:\n            return;\n        }\n        const container = document.createElement('li');\n        // The link itself\n        controlPanelLink = document.createElement('a');\n        controlPanelLink.setAttribute('id', 'nav-rplus');\n        controlPanelLink.setAttribute('href', manifest.homepage_url);\n        controlPanelLink.setAttribute('class', 'dynamic-overflow-container text-nav');\n        container.appendChild(controlPanelLink);\n        // The icon\n        const controlPanelIcon = document.createElement('span');\n        controlPanelIcon.setAttribute('class', 'rplus-icon');\n        const controlPanelIconContainer = document.createElement('div');\n        controlPanelIconContainer.appendChild(controlPanelIcon);\n        controlPanelLink.appendChild(controlPanelIconContainer);\n        // The text\n        const controlPanelText = document.createElement('span');\n        controlPanelText.setAttribute('class', 'font-header-2 dynamic-ellipsis-item');\n        controlPanelText.innerText = 'Control Panel';\n        controlPanelLink.appendChild(controlPanelText);\n        // The finale\n        upgradeButton.before(container);\n    }\n}, 500);\nwindow.navigationBar = {\n    getRobux,\n    setRobux,\n    getBubbleValue,\n    setBubbleValue,\n    updateNavigationLink,\n};\n","import { getSettingValue } from '../../../services/settings';\nimport { setText } from './utils';\nconst getLinkOverrides = async () => {\n    try {\n        const setting = await getSettingValue('navigation');\n        if (setting.buttons) {\n            return setting.buttons.map((button) => {\n                if ((button.href === '/develop' && button.text === 'Create') ||\n                    (button.href.startsWith('/robux') && button.text === 'Robux')) {\n                    // default value, do not override\n                    return {\n                        href: '',\n                        text: '',\n                        override: false,\n                    };\n                }\n                // Value has been set explicitly, use that.\n                return {\n                    href: button.href,\n                    text: button.text,\n                    override: true,\n                };\n            });\n        }\n    }\n    catch (err) {\n        console.warn('Failed to fetch navigation link overrides', err);\n    }\n    return [];\n};\n// Updates a navigation link item by its index.\nconst updateNavigationLink = (index, text, href) => {\n    document\n        .querySelectorAll('#header ul.rbx-navbar')\n        .forEach((navigationBar) => {\n        const navigationLinks = Array.from(navigationBar.querySelectorAll('li>a.nav-menu-title:first-child'));\n        const link = navigationLinks[index >= 0 ? index : navigationLinks.length + index];\n        if (link) {\n            setText(link, text);\n            link.setAttribute('href', href);\n        }\n    });\n};\nexport { updateNavigationLink, getLinkOverrides };\n","import { getAbbreviateAtValue, parseNumber, setText } from './utils';\nimport { parseAuthenticatedUser } from '../../../utils/authenticatedUser';\nimport { getRobuxBalance } from '../../../services/currency';\nimport abbreviateNumber from '../../../utils/abbreviateNumber';\nimport { getSettingValue } from '../../../services/settings';\nconst devexRate = 0.0035;\n// Checks whether or not the DevEx rate is visible.\nconst devexRateEnabled = async () => {\n    try {\n        const setting = await getSettingValue('navigation');\n        return setting?.showDevexRate === true;\n    }\n    catch (err) {\n        console.warn('Failed to check if DevEx rate is visible.', err);\n        return false;\n    }\n};\n// Gets the element containing the DevEx rate for the current Robux.\nconst getDevExRateElement = (robuxValueElement) => {\n    let devexContainer = document.getElementById('rplus-devex-rate');\n    if (!devexContainer) {\n        // We don't have a container, create it.\n        devexContainer = document.createElement('li');\n        devexContainer.setAttribute('id', 'rplus-devex-rate');\n        robuxValueElement.parentElement?.after(devexContainer);\n    }\n    let devexElement = devexContainer.querySelector('a');\n    if (!devexElement) {\n        devexElement = document.createElement('a');\n        devexElement.setAttribute('href', 'https://create.roblox.com/devex');\n        devexElement.classList.add('rbx-menu-item');\n        devexContainer.append(devexElement);\n    }\n    return devexElement;\n};\n// Fetches the Robux from the navigation bar, if possible.\n// Otherwise, fetches the Robux from the API.\nconst getRobux = async (mustLoad) => {\n    const authenticatedUser = parseAuthenticatedUser();\n    if (!authenticatedUser) {\n        return 0;\n    }\n    const countElement = document.getElementById('navbar-robux');\n    if (!mustLoad) {\n        // Adding a count attribute on the element to cache the value.\n        const count = Number(countElement?.getAttribute('count') || NaN);\n        if (!isNaN(count)) {\n            return count;\n        }\n        const element = document.getElementById('nav-robux-balance');\n        if (element) {\n            const textCount = parseNumber(element?.innerText);\n            countElement?.setAttribute('count', `${textCount}`);\n            return textCount;\n        }\n    }\n    const loadedCount = await getRobuxBalance(authenticatedUser.id);\n    countElement?.setAttribute('count', `${loadedCount}`);\n    return loadedCount;\n};\n// Updates the Robux count in the navigation bar.\nconst setRobux = async (value) => {\n    const authenticatedUser = parseAuthenticatedUser();\n    if (!authenticatedUser) {\n        // Can't update the Robux count yet because there is no authenticated user.\n        // Page probably isn't loaded, or we're logged out.\n        return;\n    }\n    const countElement = document.getElementById('navbar-robux');\n    countElement?.setAttribute('count', `${value}`);\n    try {\n        const abbreviatedAt = await getAbbreviateAtValue();\n        const abbreviatedElement = document.getElementById('nav-robux-amount');\n        if (abbreviatedElement) {\n            setText(abbreviatedElement, abbreviateNumber(value, abbreviatedAt));\n        }\n        const fullValueElement = document.getElementById('nav-robux-balance');\n        if (fullValueElement) {\n            setText(fullValueElement, `${value.toLocaleString()} Robux`);\n            if (await devexRateEnabled()) {\n                const devexBalance = value * devexRate;\n                const devexElement = getDevExRateElement(fullValueElement);\n                const formattedValue = Number(devexBalance.toFixed(2))\n                    .toLocaleString()\n                    .replace(/\\.(\\d)$/, `.$10`);\n                setText(devexElement, `$${formattedValue} USD`);\n            }\n        }\n    }\n    catch (err) {\n        console.warn('Failed to update Robux in navigation bar', err);\n    }\n};\nexport { getRobux, setRobux };\n","import { getSettingValue } from '../../../services/settings';\nimport { abbreviations } from '../../../utils/abbreviateNumber';\n// Parses a whole number out of a string, which could be locale-formatted.\nconst parseNumber = (input) => {\n    const match = input?.match(/\\d+/g) || [];\n    if (match.length < 1) {\n        return NaN;\n    }\n    return Number(match.join(''));\n};\n// Sets the text on an element, or ignores it.\nconst setText = (element, text) => {\n    if (element.innerText === text) {\n        return false;\n    }\n    element.innerText = text;\n    return true;\n};\n// Fetches the value where we should start abbreviating navigation counters.\nconst getAbbreviateAtValue = async () => {\n    let abbreviation = null;\n    try {\n        const setting = await getSettingValue('navigation');\n        if (setting?.counterCommas) {\n            abbreviation = Number(setting.counterCommas);\n        }\n    }\n    catch (err) {\n        console.warn('Failed to determine abbreviation value', err);\n    }\n    return abbreviation || abbreviations[0].value;\n};\nexport { parseNumber, setText, getAbbreviateAtValue };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nimport { recordUserRobux } from './history';\nconst messageDestination = 'currencyService.getRobuxBalance';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the Robux balance of the currently authenticated user.\nconst getRobuxBalance = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the Robux balance of the currently authenticated user.\nconst loadRobuxBalance = async (userId) => {\n    const response = await fetch(`https://economy.roblox.com/v1/users/${userId}/currency`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load Robux balance';\n    }\n    const result = await response.json();\n    try {\n        await recordUserRobux(userId, result.robux);\n    }\n    catch (err) {\n        console.warn('Failed to record Robux history');\n    }\n    return result.robux;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadRobuxBalance(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getRobuxBalance;\n","import { open } from 'db.js';\nimport { isBackgroundPage } from '../../constants';\nimport { addListener, sendMessage } from '../message';\nimport { getToggleSettingValue } from '../settings';\nconst messageDestination = 'currencyService.history.';\nif (isBackgroundPage) {\n    open({\n        server: 'currencyBalances',\n        version: 1,\n        schema: {\n            robuxHistory: {\n                key: {\n                    keyPath: ['currencyHolderType', 'currencyHolderId', 'robuxDate'],\n                },\n                indexes: {\n                    currencyHolderType: {},\n                    currencyHolderId: {},\n                    robuxDate: {},\n                },\n            },\n        },\n    })\n        .then((database) => {\n        console.log('Database connection (for robuxHistory) opened.');\n        window.robuxHistoryDatabase = database;\n        // Ensure the amount of stored data doesn't get too out of hand.\n        // Only store one year of data.\n        setInterval(async () => {\n            try {\n                const now = +new Date();\n                const purgeDate = new Date(now - 32 * 12 * 24 * 60 * 60 * 1000);\n                const robuxHistory = await database.robuxHistory\n                    .query('robuxDate')\n                    .range({ lte: purgeDate.getTime() })\n                    .execute();\n                if (robuxHistory.length <= 0) {\n                    return;\n                }\n                await Promise.all(robuxHistory.map((robuxHistoryRecord) => {\n                    return database.robuxHistory.remove({\n                        eq: [\n                            robuxHistoryRecord.currencyHolderType,\n                            robuxHistoryRecord.currencyHolderId,\n                            robuxHistoryRecord.robuxDate,\n                        ],\n                    });\n                }));\n            }\n            catch (e) {\n                console.warn('Failed to purge Robux history database', e);\n            }\n        }, 60 * 60 * 1000);\n    })\n        .catch((err) => {\n        console.error('Failed to connect to robuxHistory database.', err);\n    });\n}\nconst recordUserRobux = async (userId, robux) => {\n    const enabled = await getToggleSettingValue('robuxHistoryEnabled');\n    if (!enabled) {\n        return;\n    }\n    return sendMessage(messageDestination + 'recordUserRobux', {\n        userId,\n        robux,\n    });\n};\nconst getUserRobuxHistory = async (userId, startDateTime, endDateTime) => {\n    const robuxHistory = await sendMessage(messageDestination + 'getUserRobuxHistory', {\n        userId,\n        startDateTime: startDateTime.getTime(),\n        endDateTime: endDateTime.getTime(),\n    });\n    return robuxHistory.map((h) => {\n        return {\n            value: h.robux,\n            date: new Date(h.robuxDate),\n        };\n    });\n};\naddListener(messageDestination + 'recordUserRobux', async (message) => {\n    const now = +new Date();\n    const robuxDateTime = new Date(now - (now % 60000));\n    await robuxHistoryDatabase.robuxHistory.update({\n        currencyHolderType: 'User',\n        currencyHolderId: message.userId,\n        robux: message.robux,\n        robuxDate: robuxDateTime,\n    });\n}, {\n    levelOfParallelism: 1,\n});\naddListener(messageDestination + 'getUserRobuxHistory', async (message) => {\n    const history = await robuxHistoryDatabase.robuxHistory\n        .query('robuxDate')\n        .range({\n        gte: message.startDateTime,\n        lte: message.endDateTime,\n    })\n        .filter((row) => row.currencyHolderType === 'User' &&\n        row.currencyHolderId === message.userId)\n        .execute();\n    return history;\n}, {\n    levelOfParallelism: 1,\n});\nexport { recordUserRobux, getUserRobuxHistory };\n","import { default as getRobuxBalance } from './getRobuxBalance';\nimport { getUserRobuxHistory } from './history';\nglobalThis.currencyService = { getRobuxBalance, getUserRobuxHistory };\nexport { getRobuxBalance, getUserRobuxHistory };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'friendsService.getFriendRequestCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the inbound friend request count for the currently authenticated user.\nconst getFriendRequestCount = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the inbound friend request count for the currently authenticated user.\nconst loadFriendRequestCount = async (userId) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://friends.roblox.com/v1/user/friend-requests/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load friend request count';\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadFriendRequestCount(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getFriendRequestCount;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'friendsService.getUserFriends';\nconst cache = new ExpirableDictionary(messageDestination, 60 * 1000);\n// Fetches the list of friends for the user.\nconst getUserFriends = (userId) => {\n    return sendMessage(messageDestination, {\n        userId,\n    });\n};\n// Loads the actual friend list for the user.\nconst loadUserFriends = async (userId) => {\n    const response = await fetch(`https://friends.roblox.com/v1/users/${userId}/friends`);\n    if (!response.ok) {\n        throw new Error(`Failed to load friends for user (${userId})`);\n    }\n    const result = await response.json();\n    return result.data.map((r) => {\n        return {\n            id: r.id,\n            name: r.name,\n            displayName: r.displayName,\n        };\n    });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadUserFriends(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getUserFriends;\n","import { default as getUserFriends } from './getUserFriends';\nimport { default as getFriendRequestCount } from './getFriendRequestCount';\nglobalThis.friendsService = { getUserFriends, getFriendRequestCount };\nexport { getUserFriends, getFriendRequestCount };\n","import { isBackgroundPage } from '../../constants';\nimport xsrfFetch from '../../utils/xsrfFetch';\n// The generated authentication ticket URL, to prevent other extensions from getting the special headers included.\nconst authTicketUrl = new URL(`https://auth.roblox.com/v1/authentication-ticket?roblox-plus-security-token=${crypto.randomUUID()}`);\n// Fetches the authentication ticket, to launch the experience with.\nconst getAuthenticationTicket = async () => {\n    const response = await xsrfFetch(authTicketUrl, {\n        method: 'POST',\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to fetch authentication ticket for game launch`);\n    }\n    return response.headers.get('rbx-authentication-ticket');\n};\n// Builds the place launcher URL, used to craft the protocol launcher URL.\nconst buildPlaceLauncherUrl = (info) => {\n    const prefix = `https://assetgame.roblox.com/game/PlaceLauncher.ashx?request=`;\n    if (info.followUserId) {\n        return `${prefix}RequestFollowUser&userId=${info.followUserId}`;\n    }\n    throw new Error('Unable to determine place launcher URL');\n};\n// Builds the protocol launcher URL, to launch the experience with.\nconst buildProtocolUrl = async (info) => {\n    const authenticationTicket = await getAuthenticationTicket();\n    const placeLauncherUrl = encodeURIComponent(buildPlaceLauncherUrl(info));\n    const currentTime = +new Date();\n    return `roblox-player:1+launchmode:play+launchTime:${currentTime}+placelauncherurl:${placeLauncherUrl}+gameinfo:${authenticationTicket}`;\n};\nif (isBackgroundPage) {\n    // Set the Referer header, so that we can access the authentication ticket, for the protocol launcher URL.\n    chrome.declarativeNetRequest.updateSessionRules({\n        removeRuleIds: [1],\n        addRules: [\n            {\n                id: 1,\n                condition: {\n                    urlFilter: authTicketUrl.href,\n                    requestMethods: [chrome.declarativeNetRequest.RequestMethod.POST],\n                    resourceTypes: [\n                        chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,\n                    ],\n                },\n                action: {\n                    type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,\n                    requestHeaders: [\n                        {\n                            header: 'Referer',\n                            operation: chrome.declarativeNetRequest.HeaderOperation.SET,\n                            value: 'https://www.roblox.com/groups/2518656/Roblox-Plus?extension-game-launch=true',\n                        },\n                    ],\n                },\n            },\n        ],\n    });\n}\nexport default buildProtocolUrl;\n","import launchProtocolUrl from '../../utils/launchProtocolUrl';\nimport buildProtocolUrl from './buildProtocolUrl';\n// Launches into the experience that the specified user is playing.\nconst followUser = async (userId) => {\n    const url = await buildProtocolUrl({\n        followUserId: userId,\n    });\n    await launchProtocolUrl(url);\n};\nglobalThis.gameLaunchService = { followUser };\nexport { followUser };\n","import { isBackgroundPage } from '../../constants';\n// All the listeners, set in the background page.\nconst listeners = {};\n// All the tabs actively connected to the message service.\nconst tabs = {};\n// An identifier that tells us which version of the messaging service we're using,\n// to ensure we don't try to process a message not intended for us.\nconst version = 2.5;\n// Send a message to a destination, and get back the result.\nconst sendMessage = async (destination, message) => {\n    return new Promise(async (resolve, reject) => {\n        const serializedMessage = JSON.stringify(message);\n        if (isBackgroundPage) {\n            // Message is from the background page, to the background page.\n            try {\n                if (listeners[destination]) {\n                    const message = JSON.parse(serializedMessage);\n                    const result = await listeners[destination](message);\n                    console.debug(`Local listener response for '${destination}':`, result, message);\n                    const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                    if (result.success) {\n                        resolve(data);\n                    }\n                    else {\n                        reject(data);\n                    }\n                }\n                else {\n                    reject(`No message listener: ${destination}`);\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        }\n        else {\n            const outboundMessage = JSON.stringify({\n                version,\n                destination,\n                message: serializedMessage,\n            });\n            console.debug(`Sending message to '${destination}'`, serializedMessage);\n            chrome.runtime.sendMessage(outboundMessage, (result) => {\n                if (result === undefined) {\n                    reject(`Unexpected message result (undefined), suggests no listener in background page.\\n\\tDestination: ${destination}`);\n                    return;\n                }\n                const data = result.data === undefined ? undefined : JSON.parse(result.data);\n                if (result.success) {\n                    resolve(data);\n                }\n                else {\n                    reject(data);\n                }\n            });\n        }\n    });\n};\n// Fetches a tab that we can send a message to, for work processing.\nconst getWorkerTab = () => {\n    const keys = Object.keys(tabs);\n    return keys.length > 0 ? tabs[keys[0]] : undefined;\n};\n// Sends a message to a tab.\nconst sendMessageToTab = async (destination, message, tab) => {\n    const serializedMessage = JSON.stringify(message);\n    const outboundMessage = JSON.stringify({\n        version,\n        destination,\n        message: serializedMessage,\n    });\n    console.debug(`Sending message to '${destination}' in tab`, serializedMessage, tab);\n    tab.postMessage(outboundMessage);\n};\n// Listen for messages at a specific destination.\nconst addListener = (destination, listener, options = {\n    levelOfParallelism: -1,\n}) => {\n    if (listeners[destination]) {\n        throw new Error(`${destination} already has message listener attached`);\n    }\n    const processMessage = async (message) => {\n        try {\n            console.debug(`Processing message for '${destination}'`, message);\n            const result = await listener(message);\n            const response = {\n                success: true,\n                data: JSON.stringify(result),\n            };\n            console.debug(`Successful message result from '${destination}':`, response, message);\n            return response;\n        }\n        catch (err) {\n            const response = {\n                success: false,\n                data: JSON.stringify(err),\n            };\n            console.debug(`Failed message result from '${destination}':`, response, message, err);\n            return response;\n        }\n    };\n    listeners[destination] = (message) => {\n        if (options.levelOfParallelism !== 1) {\n            return processMessage(message);\n        }\n        return new Promise((resolve, reject) => {\n            // https://stackoverflow.com/a/73482349/1663648\n            navigator.locks\n                .request(`messageService:${destination}`, async () => {\n                try {\n                    const result = await processMessage(message);\n                    resolve(result);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    };\n};\n// If we're currently in the background page, listen for messages.\nif (isBackgroundPage) {\n    chrome.runtime.onMessage.addListener((rawMessage, sender, sendResponse) => {\n        if (typeof rawMessage !== 'string') {\n            // Not for us.\n            return;\n        }\n        const fullMessage = JSON.parse(rawMessage);\n        if (fullMessage.version !== version ||\n            !fullMessage.destination ||\n            !fullMessage.message) {\n            // Not for us.\n            return;\n        }\n        const listener = listeners[fullMessage.destination];\n        if (!listener) {\n            sendResponse({\n                success: false,\n                data: JSON.stringify(`Could not route message to destination: ${fullMessage.destination}`),\n            });\n            return;\n        }\n        const message = JSON.parse(fullMessage.message);\n        listener(message)\n            .then(sendResponse)\n            .catch((err) => {\n            console.error('Listener is never expected to throw.', err, rawMessage, fullMessage);\n            sendResponse({\n                success: false,\n                data: JSON.stringify('Listener threw unhandled exception (see background page for error).'),\n            });\n        });\n        // Required for asynchronous callbacks\n        // https://stackoverflow.com/a/20077854/1663648\n        return true;\n    });\n    chrome.runtime.onConnect.addListener((port) => {\n        const id = crypto.randomUUID();\n        console.debug('Tab connected', id, port);\n        tabs[id] = port;\n        port.onDisconnect.addListener(() => {\n            console.debug('Disconnecting tab', id, port);\n            delete tabs[id];\n        });\n    });\n}\nelse {\n    console.debug(`Not attaching listener for messages, because we're not in the background.`);\n    if (!window.messageServiceConnection) {\n        const port = (window.messageServiceConnection = chrome.runtime.connect(chrome.runtime.id, {\n            name: 'messageService',\n        }));\n        port.onMessage.addListener((rawMessage) => {\n            if (typeof rawMessage !== 'string') {\n                // Not for us.\n                return;\n            }\n            const fullMessage = JSON.parse(rawMessage);\n            if (fullMessage.version !== version ||\n                !fullMessage.destination ||\n                !fullMessage.message) {\n                // Not for us.\n                return;\n            }\n            const listener = listeners[fullMessage.destination];\n            if (!listener) {\n                // No listener in this tab for this message.\n                return;\n            }\n            // We don't really have a way to communicate the response back to the service worker.\n            // So we just... do nothing with it.\n            const message = JSON.parse(fullMessage.message);\n            listener(message).catch((err) => {\n                console.error('Unhandled error processing message in tab', fullMessage, err);\n            });\n        });\n    }\n}\nglobalThis.messageService = { sendMessage, addListener, getWorkerTab, sendMessageToTab };\nexport { sendMessage, addListener, getWorkerTab, sendMessageToTab };\n","import { Batch } from '@tix-factory/batch';\nimport PresenceType from '../../enums/presenceType';\nconst getPresenceType = (presenceType) => {\n    switch (presenceType) {\n        case 1:\n            return PresenceType.Online;\n        case 2:\n            return PresenceType.Experience;\n        case 3:\n            return PresenceType.Studio;\n        default:\n            return PresenceType.Offline;\n    }\n};\nconst getLocationName = (presenceType, name) => {\n    if (!name) {\n        return '';\n    }\n    if (presenceType === PresenceType.Studio) {\n        return name.replace(/^Studio\\s+-\\s*/, '');\n    }\n    return name;\n};\nclass PresenceBatchProcessor extends Batch {\n    constructor() {\n        super({\n            levelOfParallelism: 1,\n            maxSize: 100,\n            minimumDelay: 3 * 1000,\n            enqueueDeferDelay: 10,\n        });\n    }\n    async process(items) {\n        const response = await fetch('https://presence.roblox.com/v1/presence/users', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                userIds: items.map((i) => i.value),\n            }),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to load user presence');\n        }\n        const result = await response.json();\n        items.forEach((item) => {\n            const presence = result.userPresences.find((p) => p.userId === item.value);\n            if (presence) {\n                const presenceType = getPresenceType(presence.userPresenceType);\n                if (presence.placeId &&\n                    (presenceType === PresenceType.Experience ||\n                        presenceType === PresenceType.Studio)) {\n                    item.resolve({\n                        type: presenceType,\n                        location: {\n                            placeId: presence.placeId || undefined,\n                            universeId: presence.universeId || undefined,\n                            name: getLocationName(presenceType, presence.lastLocation),\n                            serverId: presence.gameId,\n                        },\n                    });\n                }\n                else {\n                    item.resolve({\n                        type: presenceType,\n                    });\n                }\n            }\n            else {\n                item.resolve({\n                    type: PresenceType.Offline,\n                });\n            }\n        });\n    }\n}\nexport default PresenceBatchProcessor;\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport { addListener, sendMessage } from '../message';\nimport PresenceBatchProcessor from './batchProcessor';\nconst messageDestination = 'presenceService.getUserPresence';\nconst presenceProcessor = new PresenceBatchProcessor();\nconst presenceCache = new ExpirableDictionary('presenceService', 15 * 1000);\n// Fetches the presence for a user.\nconst getUserPresence = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return presenceCache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    presenceProcessor.enqueue(message.userId));\n});\nglobalThis.presenceService = { getUserPresence };\nexport { getUserPresence };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'privateMessagesService.getUnreadMessageCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the unread private message count for the currently authenticated user.\nconst getUnreadMessageCount = (userId) => {\n    return sendMessage(messageDestination, { userId });\n};\n// Loads the unread private message count for the authenticated user.\nconst loadUnreadMessageCount = async (userId) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://privatemessages.roblox.com/v1/messages/unread/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw 'Failed to load unread private message count';\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.userId}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadUnreadMessageCount(message.userId));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getUnreadMessageCount;\n","import { default as getUnreadMessageCount } from './getUnreadMessageCount';\nglobalThis.privateMessagesService = { getUnreadMessageCount };\nexport { getUnreadMessageCount };\n","import { sendMessage, addListener } from '../message';\n// Destination to be used with messaging.\nconst messageDestinationPrefix = 'settingsService';\n// Fetches a locally stored setting value by its key.\nconst getSettingValue = (key) => {\n    return sendMessage(`${messageDestinationPrefix}.getSettingValue`, {\n        key,\n    });\n};\n// Gets a boolean setting value, toggled to false by default.\nconst getToggleSettingValue = async (key) => {\n    const value = await getSettingValue(key);\n    return !!value;\n};\n// Locally stores a setting value.\nconst setSettingValue = (key, value) => {\n    return sendMessage(`${messageDestinationPrefix}.setSettingValue`, {\n        key,\n        value,\n    });\n};\nconst getValueFromLocalStorage = (key) => {\n    if (!localStorage.hasOwnProperty(key)) {\n        return undefined;\n    }\n    try {\n        const valueArray = JSON.parse(localStorage[key]);\n        if (Array.isArray(valueArray) && valueArray.length > 0) {\n            return valueArray[0];\n        }\n        console.warn(`Setting value in localStorage invalid: ${localStorage[key]} - removing it.`);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n    catch (err) {\n        console.warn(`Failed to parse '${key}' value from localStorage - removing it.`, err);\n        localStorage.removeItem(key);\n        return undefined;\n    }\n};\naddListener(`${messageDestinationPrefix}.getSettingValue`, ({ key }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        const value = getValueFromLocalStorage(key);\n        if (value !== undefined) {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(value);\n            });\n        }\n        else {\n            chrome.storage.local.get(key, (values) => {\n                resolve(values[key]);\n            });\n        }\n    });\n});\naddListener(`${messageDestinationPrefix}.setSettingValue`, ({ key, value }) => {\n    return new Promise((resolve, reject) => {\n        // chrome.storage APIs are callback-based until manifest V3.\n        // Currently in migration phase, to migrate settings from localStorage -> chrome.storage.local\n        if (value === undefined) {\n            chrome.storage.local.remove(key, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n        else {\n            chrome.storage.local.set({\n                [key]: value,\n            }, () => {\n                localStorage.removeItem(key);\n                resolve(undefined);\n            });\n        }\n    });\n});\nglobalThis.settingsService = { getSettingValue, getToggleSettingValue, setSettingValue };\nexport { getSettingValue, getToggleSettingValue, setSettingValue };\n","import ExpirableDictionary from '../../utils/expireableDictionary';\nimport wait from '../../utils/wait';\nimport { addListener, sendMessage } from '../message';\nconst messageDestination = 'tradesService.getTradeCount';\nconst cache = new ExpirableDictionary(messageDestination, 30 * 1000);\nconst failureDelay = 5 * 1000;\n// Fetches the unread private message count for the currently authenticated user.\nconst getTradeCount = (tradeStatusType) => {\n    return sendMessage(messageDestination, {\n        tradeStatusType,\n    });\n};\n// Loads the unread private message count for the authenticated user.\nconst loadTradeCount = async (tradeStatusType) => {\n    // User ID is used as a cache buster.\n    const response = await fetch(`https://trades.roblox.com/v1/trades/${tradeStatusType}/count`);\n    // If we fail to send the request, delay the response to ensure we don't spam the API.\n    if (response.status === 401) {\n        await wait(failureDelay);\n        throw 'User is unauthenticated';\n    }\n    else if (!response.ok) {\n        await wait(failureDelay);\n        throw `Failed to load ${tradeStatusType} trade count`;\n    }\n    const result = await response.json();\n    return result.count;\n};\n// Listen for messages sent to the service worker.\naddListener(messageDestination, (message) => {\n    // Check the cache\n    return cache.getOrAdd(`${message.tradeStatusType}`, () => \n    // Queue up the fetch request, when not in the cache\n    loadTradeCount(message.tradeStatusType));\n}, {\n    levelOfParallelism: 1,\n});\nexport default getTradeCount;\n","import { default as getTradeCount } from './getTradeCount';\nglobalThis.tradesService = { getTradeCount };\nexport { getTradeCount };\n","// All the values to abbreviate a number at.\nconst abbreviations = [\n    {\n        value: 1000,\n        abbreviation: 'K',\n    },\n    {\n        value: 1000000,\n        abbreviation: 'M',\n    },\n    {\n        value: 1000000000,\n        abbreviation: 'B',\n    },\n    {\n        value: 1000000000000,\n        abbreviation: 'T',\n    },\n];\nexport { abbreviations };\n// Abbreviates a number, for human readability, after it surpasses a given value (or after 1,000 if not provided).\nexport default (value, abbreviateAt) => {\n    if (!abbreviateAt) {\n        abbreviateAt = abbreviations[0].value;\n    }\n    if (value >= abbreviateAt) {\n        for (let i = abbreviations.length - 1; i >= 0; i--) {\n            if (value >= abbreviations[i].value) {\n                return `${Math.floor(value / abbreviations[i].value).toLocaleString()}${abbreviations[i].abbreviation}+`;\n            }\n        }\n    }\n    return value.toLocaleString();\n};\n","// Fetches the user who is currently authenticated on the loaded web page.\nconst parseAuthenticatedUser = () => {\n    const userData = globalThis.document && document.querySelector(`meta[name='user-data']`);\n    // The user who is currently authenticated on the loaded web page.\n    return userData\n        ? {\n            id: Number(userData.getAttribute('data-userid')),\n            name: userData.getAttribute('data-name') || '',\n            displayName: userData.getAttribute('data-displayname') || '',\n        }\n        : null;\n};\nconst authenticatedUser = parseAuthenticatedUser();\nexport default authenticatedUser;\n// TODO: Deprecate after manifest V3 conversion.\nexport { parseAuthenticatedUser };\n","// This class can be used to concurrently cache items, or fetch their values.\nclass ExpirableDictionary {\n    lockKey;\n    expirationInMilliseconds;\n    // The items that are in the dictionary.\n    items = {};\n    constructor(\n    // A name for the dictionary, used for locking.\n    name, \n    // How long the item will remain in the dictionary, in milliseconds.\n    expirationInMilliseconds) {\n        this.lockKey = `ExpirableDictionary:${name}`;\n        this.expirationInMilliseconds = expirationInMilliseconds;\n    }\n    // Tries to fetch an item by its key from the dictionary, or it will call the value factory to add it in.\n    getOrAdd(key, valueFactory) {\n        const item = this.items[key];\n        if (item !== undefined) {\n            return Promise.resolve(item);\n        }\n        return new Promise((resolve, reject) => {\n            navigator.locks\n                .request(`${this.lockKey}:${key}`, async () => {\n                // It's possible the item was added since we requested the lock, check again.\n                const item = this.items[key];\n                if (item !== undefined) {\n                    resolve(item);\n                    return;\n                }\n                try {\n                    const value = (this.items[key] = await valueFactory());\n                    setTimeout(() => this.evict(key), this.expirationInMilliseconds);\n                    resolve(value);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    evict(key) {\n        delete this.items[key];\n    }\n}\nexport default ExpirableDictionary;\n","import { isBackgroundPage } from '../constants';\nimport { addListener, getWorkerTab, sendMessage, sendMessageToTab, } from '../services/message';\nconst messageDestination = 'launchProtocolUrl';\n// Keep track of the tabs, so we can put the user back where they were.b\nlet previousTab = undefined;\nlet protocolLauncherTab = undefined;\n// Attempt to launch the protocol URL in the current tab.\nconst tryDirectLaunch = (protocolUrl) => {\n    if (!isBackgroundPage && location) {\n        location.href = protocolUrl;\n        return true;\n    }\n    return false;\n};\n// Launch the protocol URL from a service worker.\nconst launchProtocolUrl = (protocolUrl) => {\n    if (tryDirectLaunch(protocolUrl)) {\n        // We were able to directly launch the protocol URL.\n        // Nothing more to do.\n        return Promise.resolve();\n    }\n    const workerTab = getWorkerTab();\n    if (workerTab) {\n        // If we're in the background, and we have a tab that can process the protocol URL, use that instead.\n        // This will ensure that when we use the protocol launcher to launch Roblox, that they have the highest\n        // likihood of already having accepted the protocol launcher permission.\n        sendMessageToTab(messageDestination, {\n            protocolUrl,\n        }, workerTab);\n        return Promise.resolve();\n    }\n    // TODO: Convert to promise signatures when moving to manifest V3.\n    chrome.tabs.query({\n        active: true,\n        currentWindow: true,\n    }, (currentTab) => {\n        previousTab = currentTab[0];\n        if (previousTab) {\n            // Try to open the protocol launcher tab right next to the current tab, so that when it\n            // closes, it will put the user back on the tab they are on now.\n            chrome.tabs.create({\n                url: protocolUrl,\n                index: previousTab.index + 1,\n                windowId: previousTab.windowId,\n            }, (tab) => {\n                protocolLauncherTab = tab;\n            });\n        }\n        else {\n            chrome.tabs.create({ url: protocolUrl });\n            // If we don't know where they were before, then don't try to keep track of anything.\n            previousTab = undefined;\n            protocolLauncherTab = undefined;\n        }\n    });\n    return Promise.resolve();\n};\nif (isBackgroundPage) {\n    chrome.tabs.onRemoved.addListener((tabId) => {\n        // Return the user to the tab they were on before, when we're done launching the protocol URL.\n        // chrome self-closes the protocol URL tab when opened.\n        if (tabId === protocolLauncherTab?.id && previousTab?.id) {\n            chrome.tabs.update(previousTab.id, {\n                active: true,\n            });\n        }\n        previousTab = undefined;\n        protocolLauncherTab = undefined;\n    });\n}\naddListener(messageDestination, (message) => launchProtocolUrl(message.protocolUrl));\n// Launches a protocol URL, using the most user-friendly method.\nexport default async (protocolUrl) => {\n    if (tryDirectLaunch(protocolUrl)) {\n        // If we can directly launch the protocol URL, there's nothing left to do.\n        return;\n    }\n    // Otherwise, we have to send a message out and try some nonsense.\n    await sendMessage(messageDestination, { protocolUrl });\n};\n","export default (time) => {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, time);\n    });\n};\n","const headerName = 'X-CSRF-Token';\nlet xsrfToken = '';\n// A fetch request which will attach an X-CSRF-Token in all outbound requests.\nconst xsrfFetch = async (url, requestDetails) => {\n    if (url.hostname.endsWith('.roblox.com')) {\n        if (!requestDetails) {\n            requestDetails = {};\n        }\n        requestDetails.credentials = 'include';\n        if (!requestDetails.headers) {\n            requestDetails.headers = new Headers();\n        }\n        if (requestDetails.headers instanceof Headers) {\n            if (xsrfToken) {\n                requestDetails.headers.set(headerName, xsrfToken);\n            }\n            if (requestDetails.body && !requestDetails.headers.has('Content-Type')) {\n                requestDetails.headers.set('Content-Type', 'application/json');\n            }\n        }\n    }\n    const response = await fetch(url, requestDetails);\n    const token = response.headers.get(headerName);\n    if (response.ok || !token) {\n        return response;\n    }\n    xsrfToken = token;\n    return xsrfFetch(url, requestDetails);\n};\nexport default xsrfFetch;\n","/*! Copyright Twitter Inc. and other contributors. Licensed under MIT */\nvar twemoji=function(){\"use strict\";var twemoji={base:\"https://twemoji.maxcdn.com/v/14.0.2/\",ext:\".png\",size:\"72x72\",className:\"emoji\",convert:{fromCodePoint:fromCodePoint,toCodePoint:toCodePoint},onerror:function onerror(){if(this.parentNode){this.parentNode.replaceChild(createText(this.alt,false),this)}},parse:parse,replace:replace,test:test},escaper={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",\"'\":\"&#39;\",'\"':\"&quot;\"},re=/(?:\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffc-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc68\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc69\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83d\\udc69\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffc-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffb\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffc\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\uddd1\\ud83c\\udffd\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\uddd1\\ud83c\\udffe\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\u2764\\ufe0f\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udffe]|\\ud83e\\uddd1\\ud83c\\udfff\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc8b\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\udef1\\ud83c\\udffb\\u200d\\ud83e\\udef2\\ud83c[\\udffc-\\udfff]|\\ud83e\\udef1\\ud83c\\udffc\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffd-\\udfff]|\\ud83e\\udef1\\ud83c\\udffd\\u200d\\ud83e\\udef2\\ud83c[\\udffb\\udffc\\udffe\\udfff]|\\ud83e\\udef1\\ud83c\\udffe\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffd\\udfff]|\\ud83e\\udef1\\ud83c\\udfff\\u200d\\ud83e\\udef2\\ud83c[\\udffb-\\udffe]|\\ud83d\\udc68\\u200d\\u2764\\ufe0f\\u200d\\ud83d\\udc68|\\ud83d\\udc69\\u200d\\u2764\\ufe0f\\u200d\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1\\u200d\\ud83e\\udd1d\\u200d\\ud83e\\uddd1|\\ud83d\\udc6b\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6c\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc6d\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc8f\\ud83c[\\udffb-\\udfff]|\\ud83d\\udc91\\ud83c[\\udffb-\\udfff]|\\ud83e\\udd1d\\ud83c[\\udffb-\\udfff]|\\ud83d[\\udc6b-\\udc6d\\udc8f\\udc91]|\\ud83e\\udd1d)|(?:\\ud83d[\\udc68\\udc69]|\\ud83e\\uddd1)(?:\\ud83c[\\udffb-\\udfff])?\\u200d(?:\\u2695\\ufe0f|\\u2696\\ufe0f|\\u2708\\ufe0f|\\ud83c[\\udf3e\\udf73\\udf7c\\udf84\\udf93\\udfa4\\udfa8\\udfeb\\udfed]|\\ud83d[\\udcbb\\udcbc\\udd27\\udd2c\\ude80\\ude92]|\\ud83e[\\uddaf-\\uddb3\\uddbc\\uddbd])|(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75]|\\u26f9)((?:\\ud83c[\\udffb-\\udfff]|\\ufe0f)\\u200d[\\u2640\\u2642]\\ufe0f)|(?:\\ud83c[\\udfc3\\udfc4\\udfca]|\\ud83d[\\udc6e\\udc70\\udc71\\udc73\\udc77\\udc81\\udc82\\udc86\\udc87\\ude45-\\ude47\\ude4b\\ude4d\\ude4e\\udea3\\udeb4-\\udeb6]|\\ud83e[\\udd26\\udd35\\udd37-\\udd39\\udd3d\\udd3e\\uddb8\\uddb9\\uddcd-\\uddcf\\uddd4\\uddd6-\\udddd])(?:\\ud83c[\\udffb-\\udfff])?\\u200d[\\u2640\\u2642]\\ufe0f|(?:\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc68\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc68\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc66\\u200d\\ud83d\\udc66|\\ud83d\\udc69\\u200d\\ud83d\\udc67\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83c\\udff3\\ufe0f\\u200d\\u26a7\\ufe0f|\\ud83c\\udff3\\ufe0f\\u200d\\ud83c\\udf08|\\ud83d\\ude36\\u200d\\ud83c\\udf2b\\ufe0f|\\u2764\\ufe0f\\u200d\\ud83d\\udd25|\\u2764\\ufe0f\\u200d\\ud83e\\ude79|\\ud83c\\udff4\\u200d\\u2620\\ufe0f|\\ud83d\\udc15\\u200d\\ud83e\\uddba|\\ud83d\\udc3b\\u200d\\u2744\\ufe0f|\\ud83d\\udc41\\u200d\\ud83d\\udde8|\\ud83d\\udc68\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc69\\u200d\\ud83d[\\udc66\\udc67]|\\ud83d\\udc6f\\u200d\\u2640\\ufe0f|\\ud83d\\udc6f\\u200d\\u2642\\ufe0f|\\ud83d\\ude2e\\u200d\\ud83d\\udca8|\\ud83d\\ude35\\u200d\\ud83d\\udcab|\\ud83e\\udd3c\\u200d\\u2640\\ufe0f|\\ud83e\\udd3c\\u200d\\u2642\\ufe0f|\\ud83e\\uddde\\u200d\\u2640\\ufe0f|\\ud83e\\uddde\\u200d\\u2642\\ufe0f|\\ud83e\\udddf\\u200d\\u2640\\ufe0f|\\ud83e\\udddf\\u200d\\u2642\\ufe0f|\\ud83d\\udc08\\u200d\\u2b1b)|[#*0-9]\\ufe0f?\\u20e3|(?:[©®\\u2122\\u265f]\\ufe0f)|(?:\\ud83c[\\udc04\\udd70\\udd71\\udd7e\\udd7f\\ude02\\ude1a\\ude2f\\ude37\\udf21\\udf24-\\udf2c\\udf36\\udf7d\\udf96\\udf97\\udf99-\\udf9b\\udf9e\\udf9f\\udfcd\\udfce\\udfd4-\\udfdf\\udff3\\udff5\\udff7]|\\ud83d[\\udc3f\\udc41\\udcfd\\udd49\\udd4a\\udd6f\\udd70\\udd73\\udd76-\\udd79\\udd87\\udd8a-\\udd8d\\udda5\\udda8\\uddb1\\uddb2\\uddbc\\uddc2-\\uddc4\\uddd1-\\uddd3\\udddc-\\uddde\\udde1\\udde3\\udde8\\uddef\\uddf3\\uddfa\\udecb\\udecd-\\udecf\\udee0-\\udee5\\udee9\\udef0\\udef3]|[\\u203c\\u2049\\u2139\\u2194-\\u2199\\u21a9\\u21aa\\u231a\\u231b\\u2328\\u23cf\\u23ed-\\u23ef\\u23f1\\u23f2\\u23f8-\\u23fa\\u24c2\\u25aa\\u25ab\\u25b6\\u25c0\\u25fb-\\u25fe\\u2600-\\u2604\\u260e\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262a\\u262e\\u262f\\u2638-\\u263a\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267b\\u267f\\u2692-\\u2697\\u2699\\u269b\\u269c\\u26a0\\u26a1\\u26a7\\u26aa\\u26ab\\u26b0\\u26b1\\u26bd\\u26be\\u26c4\\u26c5\\u26c8\\u26cf\\u26d1\\u26d3\\u26d4\\u26e9\\u26ea\\u26f0-\\u26f5\\u26f8\\u26fa\\u26fd\\u2702\\u2708\\u2709\\u270f\\u2712\\u2714\\u2716\\u271d\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u2764\\u27a1\\u2934\\u2935\\u2b05-\\u2b07\\u2b1b\\u2b1c\\u2b50\\u2b55\\u3030\\u303d\\u3297\\u3299])(?:\\ufe0f|(?!\\ufe0e))|(?:(?:\\ud83c[\\udfcb\\udfcc]|\\ud83d[\\udd74\\udd75\\udd90]|[\\u261d\\u26f7\\u26f9\\u270c\\u270d])(?:\\ufe0f|(?!\\ufe0e))|(?:\\ud83c[\\udf85\\udfc2-\\udfc4\\udfc7\\udfca]|\\ud83d[\\udc42\\udc43\\udc46-\\udc50\\udc66-\\udc69\\udc6e\\udc70-\\udc78\\udc7c\\udc81-\\udc83\\udc85-\\udc87\\udcaa\\udd7a\\udd95\\udd96\\ude45-\\ude47\\ude4b-\\ude4f\\udea3\\udeb4-\\udeb6\\udec0\\udecc]|\\ud83e[\\udd0c\\udd0f\\udd18-\\udd1c\\udd1e\\udd1f\\udd26\\udd30-\\udd39\\udd3d\\udd3e\\udd77\\uddb5\\uddb6\\uddb8\\uddb9\\uddbb\\uddcd-\\uddcf\\uddd1-\\udddd\\udec3-\\udec5\\udef0-\\udef6]|[\\u270a\\u270b]))(?:\\ud83c[\\udffb-\\udfff])?|(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc65\\udb40\\udc6e\\udb40\\udc67\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc73\\udb40\\udc63\\udb40\\udc74\\udb40\\udc7f|\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f|\\ud83c\\udde6\\ud83c[\\udde8-\\uddec\\uddee\\uddf1\\uddf2\\uddf4\\uddf6-\\uddfa\\uddfc\\uddfd\\uddff]|\\ud83c\\udde7\\ud83c[\\udde6\\udde7\\udde9-\\uddef\\uddf1-\\uddf4\\uddf6-\\uddf9\\uddfb\\uddfc\\uddfe\\uddff]|\\ud83c\\udde8\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\uddee\\uddf0-\\uddf5\\uddf7\\uddfa-\\uddff]|\\ud83c\\udde9\\ud83c[\\uddea\\uddec\\uddef\\uddf0\\uddf2\\uddf4\\uddff]|\\ud83c\\uddea\\ud83c[\\udde6\\udde8\\uddea\\uddec\\udded\\uddf7-\\uddfa]|\\ud83c\\uddeb\\ud83c[\\uddee-\\uddf0\\uddf2\\uddf4\\uddf7]|\\ud83c\\uddec\\ud83c[\\udde6\\udde7\\udde9-\\uddee\\uddf1-\\uddf3\\uddf5-\\uddfa\\uddfc\\uddfe]|\\ud83c\\udded\\ud83c[\\uddf0\\uddf2\\uddf3\\uddf7\\uddf9\\uddfa]|\\ud83c\\uddee\\ud83c[\\udde8-\\uddea\\uddf1-\\uddf4\\uddf6-\\uddf9]|\\ud83c\\uddef\\ud83c[\\uddea\\uddf2\\uddf4\\uddf5]|\\ud83c\\uddf0\\ud83c[\\uddea\\uddec-\\uddee\\uddf2\\uddf3\\uddf5\\uddf7\\uddfc\\uddfe\\uddff]|\\ud83c\\uddf1\\ud83c[\\udde6-\\udde8\\uddee\\uddf0\\uddf7-\\uddfb\\uddfe]|\\ud83c\\uddf2\\ud83c[\\udde6\\udde8-\\udded\\uddf0-\\uddff]|\\ud83c\\uddf3\\ud83c[\\udde6\\udde8\\uddea-\\uddec\\uddee\\uddf1\\uddf4\\uddf5\\uddf7\\uddfa\\uddff]|\\ud83c\\uddf4\\ud83c\\uddf2|\\ud83c\\uddf5\\ud83c[\\udde6\\uddea-\\udded\\uddf0-\\uddf3\\uddf7-\\uddf9\\uddfc\\uddfe]|\\ud83c\\uddf6\\ud83c\\udde6|\\ud83c\\uddf7\\ud83c[\\uddea\\uddf4\\uddf8\\uddfa\\uddfc]|\\ud83c\\uddf8\\ud83c[\\udde6-\\uddea\\uddec-\\uddf4\\uddf7-\\uddf9\\uddfb\\uddfd-\\uddff]|\\ud83c\\uddf9\\ud83c[\\udde6\\udde8\\udde9\\uddeb-\\udded\\uddef-\\uddf4\\uddf7\\uddf9\\uddfb\\uddfc\\uddff]|\\ud83c\\uddfa\\ud83c[\\udde6\\uddec\\uddf2\\uddf3\\uddf8\\uddfe\\uddff]|\\ud83c\\uddfb\\ud83c[\\udde6\\udde8\\uddea\\uddec\\uddee\\uddf3\\uddfa]|\\ud83c\\uddfc\\ud83c[\\uddeb\\uddf8]|\\ud83c\\uddfd\\ud83c\\uddf0|\\ud83c\\uddfe\\ud83c[\\uddea\\uddf9]|\\ud83c\\uddff\\ud83c[\\udde6\\uddf2\\uddfc]|\\ud83c[\\udccf\\udd8e\\udd91-\\udd9a\\udde6-\\uddff\\ude01\\ude32-\\ude36\\ude38-\\ude3a\\ude50\\ude51\\udf00-\\udf20\\udf2d-\\udf35\\udf37-\\udf7c\\udf7e-\\udf84\\udf86-\\udf93\\udfa0-\\udfc1\\udfc5\\udfc6\\udfc8\\udfc9\\udfcf-\\udfd3\\udfe0-\\udff0\\udff4\\udff8-\\udfff]|\\ud83d[\\udc00-\\udc3e\\udc40\\udc44\\udc45\\udc51-\\udc65\\udc6a\\udc6f\\udc79-\\udc7b\\udc7d-\\udc80\\udc84\\udc88-\\udc8e\\udc90\\udc92-\\udca9\\udcab-\\udcfc\\udcff-\\udd3d\\udd4b-\\udd4e\\udd50-\\udd67\\udda4\\uddfb-\\ude44\\ude48-\\ude4a\\ude80-\\udea2\\udea4-\\udeb3\\udeb7-\\udebf\\udec1-\\udec5\\uded0-\\uded2\\uded5-\\uded7\\udedd-\\udedf\\udeeb\\udeec\\udef4-\\udefc\\udfe0-\\udfeb\\udff0]|\\ud83e[\\udd0d\\udd0e\\udd10-\\udd17\\udd20-\\udd25\\udd27-\\udd2f\\udd3a\\udd3c\\udd3f-\\udd45\\udd47-\\udd76\\udd78-\\uddb4\\uddb7\\uddba\\uddbc-\\uddcc\\uddd0\\uddde-\\uddff\\ude70-\\ude74\\ude78-\\ude7c\\ude80-\\ude86\\ude90-\\udeac\\udeb0-\\udeba\\udec0-\\udec2\\uded0-\\uded9\\udee0-\\udee7]|[\\u23e9-\\u23ec\\u23f0\\u23f3\\u267e\\u26ce\\u2705\\u2728\\u274c\\u274e\\u2753-\\u2755\\u2795-\\u2797\\u27b0\\u27bf\\ue50a])|\\ufe0f/g,UFE0Fg=/\\uFE0F/g,U200D=String.fromCharCode(8205),rescaper=/[&<>'\"]/g,shouldntBeParsed=/^(?:iframe|noframes|noscript|script|select|style|textarea)$/,fromCharCode=String.fromCharCode;return twemoji;function createText(text,clean){return document.createTextNode(clean?text.replace(UFE0Fg,\"\"):text)}function escapeHTML(s){return s.replace(rescaper,replacer)}function defaultImageSrcGenerator(icon,options){return\"\".concat(options.base,options.size,\"/\",icon,options.ext)}function grabAllTextNodes(node,allText){var childNodes=node.childNodes,length=childNodes.length,subnode,nodeType;while(length--){subnode=childNodes[length];nodeType=subnode.nodeType;if(nodeType===3){allText.push(subnode)}else if(nodeType===1&&!(\"ownerSVGElement\"in subnode)&&!shouldntBeParsed.test(subnode.nodeName.toLowerCase())){grabAllTextNodes(subnode,allText)}}return allText}function grabTheRightIcon(rawText){return toCodePoint(rawText.indexOf(U200D)<0?rawText.replace(UFE0Fg,\"\"):rawText)}function parseNode(node,options){var allText=grabAllTextNodes(node,[]),length=allText.length,attrib,attrname,modified,fragment,subnode,text,match,i,index,img,rawText,iconId,src;while(length--){modified=false;fragment=document.createDocumentFragment();subnode=allText[length];text=subnode.nodeValue;i=0;while(match=re.exec(text)){index=match.index;if(index!==i){fragment.appendChild(createText(text.slice(i,index),true))}rawText=match[0];iconId=grabTheRightIcon(rawText);i=index+rawText.length;src=options.callback(iconId,options);if(iconId&&src){img=new Image;img.onerror=options.onerror;img.setAttribute(\"draggable\",\"false\");attrib=options.attributes(rawText,iconId);for(attrname in attrib){if(attrib.hasOwnProperty(attrname)&&attrname.indexOf(\"on\")!==0&&!img.hasAttribute(attrname)){img.setAttribute(attrname,attrib[attrname])}}img.className=options.className;img.alt=rawText;img.src=src;modified=true;fragment.appendChild(img)}if(!img)fragment.appendChild(createText(rawText,false));img=null}if(modified){if(i<text.length){fragment.appendChild(createText(text.slice(i),true))}subnode.parentNode.replaceChild(fragment,subnode)}}return node}function parseString(str,options){return replace(str,function(rawText){var ret=rawText,iconId=grabTheRightIcon(rawText),src=options.callback(iconId,options),attrib,attrname;if(iconId&&src){ret=\"<img \".concat('class=\"',options.className,'\" ','draggable=\"false\" ','alt=\"',rawText,'\"',' src=\"',src,'\"');attrib=options.attributes(rawText,iconId);for(attrname in attrib){if(attrib.hasOwnProperty(attrname)&&attrname.indexOf(\"on\")!==0&&ret.indexOf(\" \"+attrname+\"=\")===-1){ret=ret.concat(\" \",attrname,'=\"',escapeHTML(attrib[attrname]),'\"')}}ret=ret.concat(\"/>\")}return ret})}function replacer(m){return escaper[m]}function returnNull(){return null}function toSizeSquaredAsset(value){return typeof value===\"number\"?value+\"x\"+value:value}function fromCodePoint(codepoint){var code=typeof codepoint===\"string\"?parseInt(codepoint,16):codepoint;if(code<65536){return fromCharCode(code)}code-=65536;return fromCharCode(55296+(code>>10),56320+(code&1023))}function parse(what,how){if(!how||typeof how===\"function\"){how={callback:how}}return(typeof what===\"string\"?parseString:parseNode)(what,{callback:how.callback||defaultImageSrcGenerator,attributes:typeof how.attributes===\"function\"?how.attributes:returnNull,base:typeof how.base===\"string\"?how.base:twemoji.base,ext:how.ext||twemoji.ext,size:how.folder||toSizeSquaredAsset(how.size||twemoji.size),className:how.className||twemoji.className,onerror:how.onerror||twemoji.onerror})}function replace(text,callback){return String(text).replace(re,callback)}function test(text){re.lastIndex=0;var result=re.test(text);re.lastIndex=0;return result}function toCodePoint(unicodeSurrogates,sep){var r=[],c=0,p=0,i=0;while(i<unicodeSurrogates.length){c=unicodeSurrogates.charCodeAt(i++);if(p){r.push((65536+(p-55296<<10)+(c-56320)).toString(16));p=0}else if(55296<=c&&c<=56319){p=c}else{r.push(c.toString(16))}}return r.join(sep||\"-\")}}();\nexport default twemoji;","import PromiseQueue from '../promise-queue';\nimport ErrorEvent from '../events/errorEvent';\nimport ItemErrorEvent from '../events/itemErrorEvent';\n// A class for batching and processing multiple single items into a single call.\nclass Batch extends EventTarget {\n    queueMap = {};\n    promiseMap = {};\n    limiter;\n    concurrencyHandler;\n    // All the batch items waiting to be processed.\n    queueArray = [];\n    // The configuration for this batch processor.\n    config;\n    constructor(configuration) {\n        super();\n        this.config = configuration;\n        this.limiter = new PromiseQueue({\n            levelOfParallelism: 1,\n            delayInMilliseconds: configuration.minimumDelay || 0,\n        });\n        this.concurrencyHandler = new PromiseQueue({\n            levelOfParallelism: configuration.levelOfParallelism || Infinity,\n        });\n    }\n    // Enqueues an item into a batch, to be processed.\n    enqueue(item) {\n        return new Promise((resolve, reject) => {\n            const key = this.getKey(item);\n            const promiseMap = this.promiseMap;\n            const queueArray = this.queueArray;\n            const queueMap = this.queueMap;\n            const retryCount = this.config.retryCount || 0;\n            const getRetryDelay = this.getRetryDelay.bind(this);\n            const dispatchEvent = this.dispatchEvent.bind(this);\n            const check = this.check.bind(this);\n            // Step 1: Ensure we have a way to resolve/reject the promise for this item.\n            const mergedPromise = promiseMap[key] || [];\n            if (mergedPromise.length < 0) {\n                this.promiseMap[key] = mergedPromise;\n            }\n            mergedPromise.push({ resolve, reject });\n            // Step 2: Check if we have the batched item created.\n            if (!queueMap[key]) {\n                const remove = (item) => {\n                    // Mark the item as completed, so we know we either resolved or rejected it.\n                    item.completed = true;\n                    for (let i = 0; i < queueArray.length; i++) {\n                        if (queueArray[i].key === key) {\n                            queueArray.splice(i, 1);\n                            break;\n                        }\n                    }\n                    delete promiseMap[key];\n                    delete queueMap[key];\n                };\n                const batchItem = {\n                    key,\n                    value: item,\n                    attempt: 0,\n                    retryAfter: 0,\n                    completed: false,\n                    resolve(result) {\n                        // We're not accepting any new items for this resolution.\n                        remove(this);\n                        // Defer the resolution until after the thread resolves.\n                        setTimeout(() => {\n                            // Process anyone who applied.\n                            while (mergedPromise.length > 0) {\n                                const promise = mergedPromise.shift();\n                                promise?.resolve(result);\n                            }\n                        }, 0);\n                    },\n                    reject(error) {\n                        // Defer the resolution until after the thread resolves.\n                        const retryDelay = this.attempt <= retryCount ? getRetryDelay(this) : undefined;\n                        const retryAfter = retryDelay !== undefined\n                            ? performance.now() + retryDelay\n                            : undefined;\n                        // Emit an event to notify that the item failed to process.\n                        dispatchEvent(new ItemErrorEvent(error, this, retryAfter));\n                        if (retryAfter !== undefined) {\n                            // The item can be retried, we haven't hit the maximum number of attempts yet.\n                            this.retryAfter = retryAfter;\n                            // Ensure the check runs after the retry delay.\n                            setTimeout(check, retryDelay);\n                        }\n                        else {\n                            // Remove the item, and reject anyone waiting on it.\n                            remove(this);\n                            // Defer the resolution until after the thread resolves.\n                            setTimeout(() => {\n                                // Process anyone who applied.\n                                while (mergedPromise.length > 0) {\n                                    const promise = mergedPromise.shift();\n                                    promise?.reject(error);\n                                }\n                            }, 0);\n                        }\n                    },\n                };\n                queueMap[key] = batchItem;\n                queueArray.push(batchItem);\n            }\n            // Attempt to process the queue on the next event loop.\n            setTimeout(check, this.config.enqueueDeferDelay);\n        });\n    }\n    // Batches together queued items, calls the process method.\n    // Will do nothing if the config requirements aren't met.\n    check() {\n        if (this.limiter.size > 0) {\n            // Already being checked.\n            return;\n        }\n        // We're using p-limit to ensure that multiple process calls can't be called at once.\n        this.limiter.enqueue(this._check.bind(this)).catch((err) => {\n            // This should be \"impossible\".. right?\n            this.dispatchEvent(new ErrorEvent(err));\n        });\n    }\n    // The actual implementation of the check method.\n    _check() {\n        const retry = this.check.bind(this);\n        // Get a batch of items to process.\n        const batch = this.getBatch();\n        // Nothing in the queue ready to be processed.\n        if (batch.length < 1) {\n            return Promise.resolve();\n        }\n        // Update the items that we're about to process, so they don't get double processed.\n        batch.forEach((item) => {\n            item.attempt += 1;\n            item.retryAfter = Infinity;\n        });\n        setTimeout(async () => {\n            try {\n                await this.concurrencyHandler.enqueue(this.process.bind(this, batch));\n            }\n            catch (err) {\n                this.dispatchEvent(new ErrorEvent(err));\n            }\n            finally {\n                batch.forEach((item) => {\n                    if (item.completed) {\n                        // Item completed its processing, nothing more to do.\n                        return;\n                    }\n                    else if (item.retryAfter > 0 && item.retryAfter !== Infinity) {\n                        // The item failed to process, but it is going to be retried.\n                        return;\n                    }\n                    else {\n                        // Item neither rejected, or completed its processing status.\n                        // This is a requirement, so we reject the item.\n                        item.reject(new Error('Item was not marked as resolved or rejected after batch processing completed.'));\n                    }\n                });\n                // Now that we've finished processing the batch, run the process again, just in case there's anything left.\n                setTimeout(retry, 0);\n            }\n        }, 0);\n        if (batch.length >= this.config.maxSize) {\n            // We have the maximum number of items in the batch, let's make sure we kick off the process call again.\n            setTimeout(retry, this.config.minimumDelay);\n        }\n        return Promise.resolve();\n    }\n    getBatch() {\n        const now = performance.now();\n        const batch = [];\n        for (let i = 0; i < this.queueArray.length; i++) {\n            const batchItem = this.queueArray[i];\n            if (batchItem.retryAfter > now) {\n                // Item is not ready to be retried, or it is currently being processed.\n                continue;\n            }\n            batch.push(batchItem);\n            if (batch.length >= this.config.maxSize) {\n                break;\n            }\n        }\n        return batch;\n    }\n    // Obtains a unique key to identify the item.\n    // This is used to deduplicate the batched items.\n    getKey(item) {\n        return item === undefined ? 'undefined' : JSON.stringify(item);\n    }\n    // Returns how long to wait before retrying the item.\n    getRetryDelay(item) {\n        return 0;\n    }\n    // Called when it is time to process a batch of items.\n    process(items) {\n        return Promise.reject(new Error('Inherit this class, and implement the processBatch method.'));\n    }\n}\nexport default Batch;\n","// An event class which can be used to emit an error.\nclass ErrorEvent extends Event {\n    // The error associated with the event.\n    error;\n    // Constructs the event from the error.\n    constructor(error) {\n        super('error');\n        this.error = error;\n    }\n}\nexport default ErrorEvent;\n","import ErrorEvent from './errorEvent';\n// An event class which can be used to emit an error event for an item that failed to process.\nclass ItemErrorEvent extends ErrorEvent {\n    // The item that failed to process.\n    batchItem;\n    // The amount of time when the item will be retried.\n    retryAfter;\n    // Constructs the event from the error.\n    constructor(error, batchItem, retryAfter) {\n        super(error);\n        this.batchItem = batchItem;\n        this.retryAfter = retryAfter;\n    }\n}\nexport default ItemErrorEvent;\n","// Export all the things from this module.\nexport { default as Batch } from './batch';\nexport { default as ErrorEvent } from './events/errorEvent';\nexport { default as ItemErrorEvent } from './events/itemErrorEvent';\nexport { default as PromiseQueue } from './promise-queue';\n","// A limiter for running promises in parallel.\n// Queue ensures order is maintained.\nclass PromiseQueue {\n    // All the promises that have been enqueued, and are waiting to be processed.\n    queue = [];\n    // The PromiseQueue configuration.\n    config;\n    // How many promises are actively being processed.\n    activeCount = 0;\n    // The next time a promise can be processed.\n    nextProcessTime = 0;\n    // Constructs a promise queue, defining the number of promises that may run in parallel.\n    constructor(config) {\n        this.config = config;\n    }\n    // The number of promises waiting to be processed.\n    get size() {\n        return this.queue.length;\n    }\n    // Puts a function that will create the promise to run on the queue, and returns a promise\n    // that will return the result of the enqueued promise.\n    enqueue(createPromise) {\n        return new Promise(async (resolve, reject) => {\n            this.queue.push({\n                deferredPromise: { resolve, reject },\n                createPromise,\n            });\n            await this.process();\n        });\n    }\n    async process() {\n        if (this.activeCount >= this.config.levelOfParallelism) {\n            // Already running max number of promises in parallel.\n            return;\n        }\n        const reprocess = this.process.bind(this);\n        const delayInMilliseconds = this.config.delayInMilliseconds;\n        if (delayInMilliseconds !== undefined && delayInMilliseconds > 0) {\n            const now = performance.now();\n            const remainingTime = this.nextProcessTime - now;\n            if (remainingTime > 0) {\n                // We're not allowed to process the next promise yet.\n                setTimeout(reprocess, remainingTime);\n                return;\n            }\n            this.nextProcessTime = now + delayInMilliseconds;\n        }\n        const promise = this.queue.shift();\n        if (!promise) {\n            // No promise to process.\n            return;\n        }\n        this.activeCount++;\n        try {\n            const result = await promise.createPromise();\n            promise.deferredPromise.resolve(result);\n        }\n        catch (err) {\n            promise.deferredPromise.reject(err);\n        }\n        finally {\n            // Ensure we subtract from how many promises are active\n            this.activeCount--;\n            // And then run the process function again, in case there are any promises left to run.\n            setTimeout(reprocess, 0);\n        }\n    }\n}\nexport default PromiseQueue;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './navigation';\nimport { getToggleSettingValue } from '../../services/settings';\nimport twemoji from 'twemoji';\nimport '../../../css/pages/all.scss';\n// twemojis\ngetToggleSettingValue('twemoji')\n    .then((enabled) => {\n    if (!enabled) {\n        return;\n    }\n    setInterval(() => twemoji.parse(document.body), 500);\n    if (document.body) {\n        twemoji.parse(document.body);\n    }\n})\n    .catch((err) => {\n    console.warn('Failed to load twemoji setting preference', err);\n});\n// Exports for compatibility, while existing JavaScript doesn't use imports.\nexport { getUserPresence } from '../../services/presence';\nexport { followUser } from '../../services/game-launch';\n"],"names":[],"sourceRoot":""}