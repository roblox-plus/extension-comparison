{"version":3,"file":"./pages/avatar.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://roblox-plus/webpack/bootstrap","webpack://roblox-plus/webpack/runtime/make namespace object","webpack://roblox-plus/./src/js/pages/avatar/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const filterInput = document.createElement('input');\nfilterInput.setAttribute('class', 'form-control input-field');\nfilterInput.setAttribute('placeholder', 'Filter items by name...');\nconst getItemName = (itemCard) => {\n    const itemName = itemCard.querySelector('a.item-card-thumb-container');\n    return itemName?.getAttribute('data-item-name');\n};\nconst filterItemCard = (itemCard) => {\n    if (!itemCard ||\n        !itemCard.classList.contains('list-item') ||\n        !itemCard.classList.contains('item-card')) {\n        // Not an item card\n        return;\n    }\n    if (!itemCard.closest('.avatar-item-list')) {\n        // It's an item card, but it's not an avatar item card.\n        return;\n    }\n    const itemName = getItemName(itemCard);\n    if (!itemName) {\n        // This.. must not be what we're looking for.\n        // Should probably log a warning here.\n        return;\n    }\n    itemCard.classList.toggle('hidden', filterInput.value\n        ? !itemName.toLowerCase().includes(filterInput.value.toLowerCase())\n        : false);\n};\nconst filterAllItems = () => {\n    document\n        .querySelectorAll('.avatar-item-list .item-card')\n        .forEach((element) => {\n        if (!(element instanceof HTMLElement)) {\n            return;\n        }\n        filterItemCard(element);\n    });\n};\nglobalThis.addEventListener('DOMNodeInserted', (event) => {\n    if (!(event.target instanceof HTMLElement)) {\n        return;\n    }\n    filterItemCard(event.target);\n});\nfilterInput.addEventListener('change', filterAllItems);\nfilterInput.addEventListener('keyup', filterAllItems);\nsetInterval(() => {\n    const tabHeader = document.querySelector('div[avatar-tab-content-header]');\n    const breadcrumbs = tabHeader?.querySelector('.breadcrumb-container');\n    if (tabHeader?.contains(filterInput) || !breadcrumbs) {\n        return;\n    }\n    breadcrumbs.after(filterInput);\n}, 250);\nexport {};\n"],"names":[],"sourceRoot":""}